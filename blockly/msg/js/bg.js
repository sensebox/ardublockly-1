// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.bg');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Добави коментар";
Blockly.Msg.AUTH = "Позволи на приложението да записва и споделя работата ти.";
Blockly.Msg.CHANGE_VALUE_TITLE = "Промени стойността:";
Blockly.Msg.CHAT = "Говори с колега, като пишеш в това поле!";
Blockly.Msg.CLEAN_UP = "Премахни блокове";
Blockly.Msg.COLLAPSE_ALL = "Скрий блокове";
Blockly.Msg.COLLAPSE_BLOCK = "Скрий блок";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "цвят 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "цвят 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";  // untranslated
Blockly.Msg.COLOUR_BLEND_RATIO = "съотношение";
Blockly.Msg.COLOUR_BLEND_TITLE = "смеси";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Смесва два цвят в дадено съотношение (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://bg.wikipedia.org/wiki/Цвят_(оптика)";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Избери цвят от палитрата.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";  // untranslated
Blockly.Msg.COLOUR_RANDOM_TITLE = "случаен цвят";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Избери цвят на случаен принцип.";
Blockly.Msg.COLOUR_RGB_BLUE = "син";
Blockly.Msg.COLOUR_RGB_GREEN = "зелен";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";  // untranslated
Blockly.Msg.COLOUR_RGB_RED = "червен";
Blockly.Msg.COLOUR_RGB_TITLE = "оцвети с";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Създай цвят с избраните пропорции, червено, зелено и синьо. Всички стойности трябва да бъдат от 0 до 100.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "прекъсни цикъла";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "премини към следващата стъпка от цикъла";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Прекъсни цикъла, в койте се съдержа тази команда.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Премини към следващата стъпка от цикъла";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Предупреждение: Този блок може да се използва само в цикъл.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
Blockly.Msg.CONTROLS_FOREACH_TITLE = "за всеки елемент %1 в списъка %2";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "За всеки елемент в списък присвои елемента на променливата '%1' и след това изпълни командите.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg.CONTROLS_FOR_TITLE = "преброй чрез %1 от %2 до %3 през %4";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Нека променлива \"%1\" премине през стойностите от началното до крайното число през зададената стъпка и изпълни избраните блокове.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Добави условие към \"ако\" блока.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Добави окончателено, прихващащо всичко останали случаи условие към \"ако\" блока.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Добави, премахни или пренареди частите, за да промениш този \"ако\" блок.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "иначе";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "иначе ако";
Blockly.Msg.CONTROLS_IF_MSG_IF = "ако";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Ако стойността е вярна, изпълни операциите.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Ако стойността е вярна, изпълни първия блок. Иначе, изпълни втория блок.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Ако първата стойност е вярна, изпълни първия блок. Иначе, ако втората стойност е вярна, изпълни втория блок.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Ако първата стойност е вярна, изпълни първия блок. В противен случай, ако втората стойност е вярна, изпълни втория блок. Ако нито една от стойностите не е вярна, изпълни последния блок.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://bg.wikipedia.org/wiki/Цикъл_(програмиране)#For_.D1.86.D0.B8.D0.BA.D1.8A.D0.BB.D1.8A.D1.82";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "изпълни";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "Повтори %1 пъти";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Изпълнява команди няколко пъти.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "повтаряй докато";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "повтаряй докато е вярно, че";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Докато стойността е лъжа, изпълнявай командите.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Докато стойността е истина, изпълнявай командите.";
Blockly.Msg.DELETE_ALL_BLOCKS = "Изтриване на всички 1% блокове?";
Blockly.Msg.DELETE_BLOCK = "Изтрий блок";
Blockly.Msg.DELETE_X_BLOCKS = "Изтрий %1 блока";
Blockly.Msg.DISABLE_BLOCK = "Деактивирай блок";
Blockly.Msg.DUPLICATE_BLOCK = "Копирай";
Blockly.Msg.ENABLE_BLOCK = "Активирай блок";
Blockly.Msg.EXPAND_ALL = "Покажи блокове";
Blockly.Msg.EXPAND_BLOCK = "Покажи блок";
Blockly.Msg.EXTERNAL_INPUTS = "Външни входове";
Blockly.Msg.HELP = "Помощ";
Blockly.Msg.INLINE_INPUTS = "Вътрешни входове";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "създай празен списък";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Връща списък с дължина 0, не съдържащ данни";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "списък";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Добави, премахни или пренареди частите, за да промениш този списъчен блок.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "създай списък с";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Добави елемент към текста.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Създай списък с произволен брой елементи.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "първия";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "№ от края";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_GET = "вземи";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "вземи и премахни";
Blockly.Msg.LISTS_GET_INDEX_LAST = "последния";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "произволен";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "премахни";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Връща първия елемент в списък.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Връща елемента на определената позиция в списък. #1 е последният елемент.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Връща елемента на определената позиция в списък. #1 е първият елемент.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Връща последния елемент в списък.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Връща случаен елемент от списъка.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Премахва и връща първия елемент в списък.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Премахва и връща елемента на определена позиция в списък. #1 е последният елемент.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Премахва и връща елемента на определена позиция в списък. #1 е последният елемент.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Премахва и връща последния елемент в списък.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Премахва и връща случаен елемент в списък.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Премахва първия елемент в списък.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Премахва елемент на определена позиция в списък. #1 е последният елемент.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Премахва елемент на определена позиция в списък. #1 е първият елемент.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Премахва последния елемент в списък.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Премахва случаен елемент от списък.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "до № открая";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "до #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "до края";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "вземи подсписък от първия";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "вземи подсписък от № от края";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "вземи подсписък от №";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Копира част от списък.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "намери първата поява на елемента";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_LAST = "намери последната поява на елемента";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Връща индекса на първото/последното появяване на елемента в списъка. Връща 0 ако елементът не е намерен.";
Blockly.Msg.LISTS_INLIST = "в списъка";
Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 е празен";
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Връща стойност вярно, ако списъкът е празен.";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg.LISTS_LENGTH_TITLE = "дължината на %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Връща дължината на списък.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_REPEAT_TITLE = "създай списък от %1 повторен %2 пъти";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Създава списък, състоящ се от определен брой копия на елемента.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "следното";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "вмъкни на позиция";
Blockly.Msg.LISTS_SET_INDEX_SET = "промени";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Вмъква елемент в началото на списъка.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Вмъква елемент на определена позиция в списък. №1 е последният елемент.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Вмъква елемент на определена позиция в списък. №1 е първият елемент.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Добави елемент в края на списък.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Вмъква елемент на произволно място в списък.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Променя първия елемент в списък.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Променя елемента на определена позиция в списък. #1 е последният елемент.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Променя елемента на определена позиция в списък. #1 е първият елемент.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Променя последния елемент в списък.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Променя случаен елемент от списък.";
Blockly.Msg.LISTS_SORT_HELPURL = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";  // untranslated
Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = "ascending";  // untranslated
Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = "descending";  // untranslated
Blockly.Msg.LISTS_SORT_TITLE = "sort %1 %2 %3";  // untranslated
Blockly.Msg.LISTS_SORT_TOOLTIP = "Sort a copy of a list.";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = "alphabetic, ignore case";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = "numeric";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_TEXT = "alphabetic";  // untranslated
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "Направи списък от текст";
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "направи текст от списък";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Събира списък от текстове в един текст, раделени с разделител.";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Разделя текст в списък на текстове, по всеки разделител.";
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "с разделител";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "невярно";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Връща вярно или невярно.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "вярно";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Върни вярно, ако двата параметъра са еднакви.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Върни истина, ако първия параметър е по-голям от втория.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Върни истина, ако първия параметър е по-голям или равен на втория.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Върни вярно, ако първия параметър е по-малък от втория.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Върни истина, ако първия параметър е по-малък или равен на втория.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Върни вярно, ако двата параметъра са различни.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
Blockly.Msg.LOGIC_NEGATE_TITLE = "не %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Върни вярно, ако параметърът е неверен. Върни невярно, ако параметърът е верен.";
Blockly.Msg.LOGIC_NULL = "нула";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Връща нула.";
Blockly.Msg.LOGIC_OPERATION_AND = "и";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg.LOGIC_OPERATION_OR = "или";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Върни вярно, ако и двата параметъра са верни.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Върни \"вярно\", ако поне един от входовете е верен.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "тест";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "Ако е невярно";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "Ако е вярно";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Провери исловието в \"тест\". Ако условието е истина, върни  \"ако е истина\" стойността, иначе върни \"ако е лъжа\" стойността.";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://bg.wikipedia.org/wiki/Аритметика";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Върни сумата на двете числа.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Върни частното на двете числа.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Върни разликата на двете числа.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Върни произведението на двете числа.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Върни първото число, повдигнато на степен на второто число.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://bg.wikipedia.org/wiki/Събиране";
Blockly.Msg.MATH_CHANGE_TITLE = "промени %1 на %2";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Добави число към променлива '%1'.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "http://bg.wikipedia.org/wiki/Константа";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Връща една от често срещаните константи: π (3.141...), e (2.718...), φ (1.618...), sqrt(2) (1.414...), sqrt(½) (0.707...) или ∞ (безкрайност).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";  // untranslated
Blockly.Msg.MATH_CONSTRAIN_TITLE = "ограничи %1 между %2 и %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Ограничи число да бъде в определените граници (включително).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";  // untranslated
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "се дели на";
Blockly.Msg.MATH_IS_EVEN = "е четно";
Blockly.Msg.MATH_IS_NEGATIVE = "е отрицателно";
Blockly.Msg.MATH_IS_ODD = "е нечетно";
Blockly.Msg.MATH_IS_POSITIVE = "е положително";
Blockly.Msg.MATH_IS_PRIME = "е просто";
Blockly.Msg.MATH_IS_TOOLTIP = "Проверете дали дадено число е четно, нечетно, просто, цяло, положително, отрицателно или дали се дели на друго число. Връща истина или лъжа.";
Blockly.Msg.MATH_IS_WHOLE = "е цяло";
Blockly.Msg.MATH_MODULO_HELPURL = "http://bg.wikipedia.org/wiki/Остатък";
Blockly.Msg.MATH_MODULO_TITLE = "остатъка от делението на %1 на %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Върни остатъка от деление на две числа.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";  // untranslated
Blockly.Msg.MATH_NUMBER_HELPURL = "https://bg.wikipedia.org/wiki/Число";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Число.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";  // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "средната стойност на числата в списъка";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "най-голямата стойност в списъка";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "медианата на списък";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "най-малката стойност в списъка";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "мода на списъка";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "случаен елемент от списъка";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "стандартно отклонение на списък";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "сумирай списъка";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Върни средната стойност (аритметичното средно) на числата в списъка.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Върни най-голямото число в списъка.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Върни медианата в списъка.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Върни най-малкото число в списъка.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Върни списък на най-често срещаните елементи в списъка.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Върни случаен елемент от списъка.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Връща стандартното отклонение на списъка.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Върни сумата на всички числа в списъка.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://bg.wikipedia.org/wiki/Генератор_на_случайни_числа";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "случайно дробно число";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Върни случайно дробно число между 0.0 (включително) и 1.0 (без да го включва)";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://bg.wikipedia.org/wiki/Генератор_на_случайни_числа";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "случайно цяло число между %1 и %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Върни случайно число в определените граници (включително).";
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "закръгли";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "закръгли надолу";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "закръгли нагоре";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Закръгли число нагоре или надолу.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "абсолютна";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "корен квадратен";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Връща абсолютната стойност на число.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Върни е (неперовото число) на степен зададеното число.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Върни натуралния логаритъм от число.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Върни десетичния логаритъм на число.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Върни числото с обърнат знак.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Върни 10 на степен зададеното число.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Връща корен квадратен от число.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";  // untranslated
Blockly.Msg.MATH_TRIG_ACOS = "acos";  // untranslated
Blockly.Msg.MATH_TRIG_ASIN = "asin";  // untranslated
Blockly.Msg.MATH_TRIG_ATAN = "atan";  // untranslated
Blockly.Msg.MATH_TRIG_COS = "cos";  // untranslated
Blockly.Msg.MATH_TRIG_HELPURL = "https://bg.wikipedia.org/wiki/Тригонометрична_функция";
Blockly.Msg.MATH_TRIG_SIN = "sin";  // untranslated
Blockly.Msg.MATH_TRIG_TAN = "tan";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Върни аркускосинус от число.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Върни аркуссинус от число.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Върни аркустангенс от число.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Върни косинус от ъгъл в градуси (не в радиани)";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Върни синус от ъгъл в градуси (не в радиани)";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Върни тангенс от ъгъл в градуси (не в радиани)";
Blockly.Msg.ME = "Аз";
Blockly.Msg.NEW_VARIABLE = "Нова променлива...";
Blockly.Msg.NEW_VARIABLE_TITLE = "Ново име на променливата:";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";  // untranslated
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "позволи операциите";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "със:";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://bg.wikipedia.org/wiki/Подпрограма";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Изпълни дефинирана от потребителя функция \"%1\".";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://bg.wikipedia.org/wiki/Подпрограма";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Изпълни дефинирана от потребителя функция \"%1\" и използвай резултата.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "със:";
Blockly.Msg.PROCEDURES_CREATE_DO = "Създай '%1'";
Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "Опишете тази функция...";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "направиш";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "за да";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Създава функция, която не връща резултат.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "върни";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Създава функция, която връща резултат.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Предупреждение: Тази функция има дублиращи се параметри.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Покажи дефиницията на функцията";
Blockly.Msg.PROCEDURES_IFRETURN_HELPURL = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Ако стойността е истина, върни втората стойност.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Предупреждение: Този блок може да се използва само във функция.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "име на параметър";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Добавяне на параметър към функцията.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "вход";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Добави, премахни или пренареди входните параметри за тази функция.";
Blockly.Msg.REDO = "Redo";  // untranslated
Blockly.Msg.REMOVE_COMMENT = "Премахни коментар";
Blockly.Msg.RENAME_VARIABLE = "Преименувай променливата...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Преименувай всички '%1' променливи на:";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "добави текста";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_APPEND_TO = "към";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Добави текста към променливата \"%1\".";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "с малки букви";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "с Главна Буква На Всяка Дума";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "с ГЛАВНИ БУКВИ";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Връща копие на текста със сменени малки и главни букви.";
Blockly.Msg.TEXT_CHARAT_FIRST = "вземи първата буква";
Blockly.Msg.TEXT_CHARAT_FROM_END = "вземи поредна буква от края";
Blockly.Msg.TEXT_CHARAT_FROM_START = "вземи поредна буква";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "от текста";
Blockly.Msg.TEXT_CHARAT_LAST = "вземи последната буква";
Blockly.Msg.TEXT_CHARAT_RANDOM = "вземи произволна буква";
Blockly.Msg.TEXT_CHARAT_TAIL = "";  // untranslated
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Връща буквата в определена позиция.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Добави елемент към текста.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "свържи";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Добави, премахни или пренареди частите, за да промениш този текстов блок.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "со буква № (броено отзад-напред)";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "до буква №";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "со последната буква.";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "В текста";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "вземи текста от първата буква";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "вземи текста от буква № (броено отзад-напред)";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "вземи текста от буква №";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Връща определена част от текста.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "в текста";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "намери първата поява на текста";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "намери последната поява на текста";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";  // untranslated
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Връща индекса на първото/последното срещане на първия текст във втория текст. Връща 0, ако текстът не е намерен.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 е празен";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Връща истина, ако текста е празен.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "създай текст с";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Създай текст като съчетаеш няколко елемента.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_LENGTH_TITLE = "дължината на %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Връща броя на символите (включително и интервалите) в текста.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg.TEXT_PRINT_TITLE = "отпечатай %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Отпечатай текста, числото или друга стойност.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Питай потребителя за число.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Питай потребителя за текст.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "питай за число със съобщение";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "питай за текст със съобщение";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://bg.wikipedia.org/wiki/Низ";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "Буква, дума или ред";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "премахни интервалите от двете страни";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "премахни интервалите отляво";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "премахни интервалите отдясно";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Върни копие на текста с пемахнати интервали от диния или двата края.";
Blockly.Msg.TODAY = "Днес";
Blockly.Msg.UNDO = "Undo";  // untranslated
Blockly.Msg.VARIABLES_DEFAULT_NAME = "елемент";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Създай \"промени стойността на %1\"";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Връща стойността на тази променлива.";
Blockly.Msg.VARIABLES_SET = "нека %1 бъде %2";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Създай \"вземи стойността на %1\"";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Задава тази променлива да бъде равен на входа.";
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;

// Ardublockly strings
Blockly.Msg.ARD_ANALOGREAD = "read analog pin#";  // untranslated
Blockly.Msg.ARD_ANALOGREAD_TIP = "Return value between 0 and 1024";  // untranslated
Blockly.Msg.ARD_ANALOGWRITE = "set analog pin#";  // untranslated
Blockly.Msg.ARD_ANALOGWRITE_TIP = "Write analog value between 0 and 255 to a specific PWM Port";  // untranslated
Blockly.Msg.ARD_BUILTIN_LED = "set built-in LED";  // untranslated
Blockly.Msg.ARD_BUILTIN_LED_TIP = "Light on or off for the built-in LED of the Arduino";  // untranslated
Blockly.Msg.ARD_COMPONENT_WARN1 = "A %1 configuration block with the same %2 name must be added to use this block!";  // untranslated
Blockly.Msg.ARD_DEFINE = "Define";  // untranslated
Blockly.Msg.ARD_DIGITALREAD = "read digital pin#";  // untranslated
Blockly.Msg.ARD_DIGITALREAD_TIP = "Read digital value on a pin: HIGH or LOW";  // untranslated
Blockly.Msg.ARD_DIGITALWRITE = "set digitial pin#";  // untranslated
Blockly.Msg.ARD_DIGITALWRITE_TIP = "Write digital value HIGH or LOW to a specific Port";  // untranslated
Blockly.Msg.ARD_FUN_RUN_LOOP = "Arduino loop forever:";  // untranslated
Blockly.Msg.ARD_FUN_RUN_SETUP = "Arduino run first:";  // untranslated
Blockly.Msg.ARD_FUN_RUN_TIP = "Defines the Arduino setup() and loop() functions.";  // untranslated
Blockly.Msg.ARD_HIGH = "HIGH";  // untranslated
Blockly.Msg.ARD_HIGHLOW_TIP = "Set a pin state logic High or Low.";  // untranslated
Blockly.Msg.ARD_LOW = "LOW";  // untranslated
Blockly.Msg.ARD_MAP = "Map Value";  // untranslated
Blockly.Msg.ARD_MAP_FROMMAX = "from Max";  // untranslated
Blockly.Msg.ARD_MAP_FROMMIN = "from Min";  // untranslated
Blockly.Msg.ARD_MAP_TIP = "Re-maps a number from [0-1024] to another.";  // untranslated
Blockly.Msg.ARD_MAP_TOMAX = "to Max";  // untranslated
Blockly.Msg.ARD_MAP_TOMIN = "to Min";  // untranslated
Blockly.Msg.ARD_MAP_VAL = "value to [0-";  // untranslated
Blockly.Msg.ARD_NOTONE = "Turn off tone on pin #";  // untranslated
Blockly.Msg.ARD_NOTONE_PIN = "No tone PIN#";  // untranslated
Blockly.Msg.ARD_NOTONE_PIN_TIP = "Stop generating a tone on a pin";  // untranslated
Blockly.Msg.ARD_NOTONE_TIP = "Turns the tone off on the selected pin";  // untranslated
Blockly.Msg.ARD_PIN_WARN1 = "Pin %1 is needed for %2 as pin %3. Already used as %4.";  // untranslated
Blockly.Msg.ARD_PULSETIMEOUT_TIP = "Measures the duration of a pulse on the selected pin, if it is within the time-out in microseconds.";  // untranslated
Blockly.Msg.ARD_PULSE_READ = "measure %1 pulse on pin #%2";  // untranslated
Blockly.Msg.ARD_PULSE_READ_TIMEOUT = "measure %1 pulse on pin #%2 (timeout after %3 μs)";  // untranslated
Blockly.Msg.ARD_PULSE_TIP = "Measures the duration of a pulse on the selected pin.";  // untranslated
Blockly.Msg.ARD_SERIAL_BPS = "bps";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT = "print";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT_NEWLINE = "add new line";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT_TIP = "Prints data to the console/serial port as human-readable ASCII text.";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT_WARN = "A setup block for %1 must be added to the workspace to use this block!";  // untranslated
Blockly.Msg.ARD_SERIAL_SETUP = "Setup";  // untranslated
Blockly.Msg.ARD_SERIAL_SETUP_TIP = "Selects the speed for a specific Serial peripheral";  // untranslated
Blockly.Msg.ARD_SERIAL_SPEED = ":  speed to";  // untranslated
Blockly.Msg.ARD_SERVO_READ = "read SERVO from PIN#";  // untranslated
Blockly.Msg.ARD_SERVO_READ_TIP = "Read a Servo angle";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE = "set SERVO from Pin";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE_DEG_180 = "Degrees (0~180)";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE_TIP = "Set a Servo to an specified angle";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE_TO = "to";  // untranslated
Blockly.Msg.ARD_SETTONE = "Set tone on pin #";  // untranslated
Blockly.Msg.ARD_SPI_SETUP = "Setup";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_CONF = "configuration:";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_DIVIDE = "clock divide";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_LSBFIRST = "LSBFIRST";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE = "SPI mode (idle - edge)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE0 = "0 (Low - Falling)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE1 = "1 (Low - Rising)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE2 = "2 (High - Falling)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE3 = "3 (High - Rising)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MSBFIRST = "MSBFIRST";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_SHIFT = "data shift";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_TIP = "Configures the SPI peripheral.";  // untranslated
Blockly.Msg.ARD_SPI_TRANSRETURN_TIP = "Send a SPI message to an specified slave device and get data back.";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_NONE = "none";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_SLAVE = "to slave pin";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_TIP = "Send a SPI message to an specified slave device.";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_VAL = "transfer";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_WARN1 = "A setup block for %1 must be added to the workspace to use this block!";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_WARN2 = "Old pin value %1 is no longer available.";  // untranslated
Blockly.Msg.ARD_STEPPER_COMPONENT = "stepper";  // untranslated
Blockly.Msg.ARD_STEPPER_DEFAULT_NAME = "MyStepper";  // untranslated
Blockly.Msg.ARD_STEPPER_FOUR_PINS = "4";  // untranslated
Blockly.Msg.ARD_STEPPER_MOTOR = "stepper motor:";  // untranslated
Blockly.Msg.ARD_STEPPER_NUMBER_OF_PINS = "Number of pins";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN1 = "pin1#";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN2 = "pin2#";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN3 = "pin3#";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN4 = "pin4#";  // untranslated
Blockly.Msg.ARD_STEPPER_REVOLVS = "how many steps per revolution";  // untranslated
Blockly.Msg.ARD_STEPPER_SETUP = "Setup stepper motor";  // untranslated
Blockly.Msg.ARD_STEPPER_SETUP_TIP = "Configures a stepper motor pinout and other settings.";  // untranslated
Blockly.Msg.ARD_STEPPER_SPEED = "set speed (rpm) to";  // untranslated
Blockly.Msg.ARD_STEPPER_STEP = "move stepper";  // untranslated
Blockly.Msg.ARD_STEPPER_STEPS = "steps";  // untranslated
Blockly.Msg.ARD_STEPPER_STEP_TIP = "Turns the stepper motor a specific number of steps.";  // untranslated
Blockly.Msg.ARD_STEPPER_TWO_PINS = "2";  // untranslated
Blockly.Msg.ARD_TIME_DELAY = "wait";  // untranslated
Blockly.Msg.ARD_TIME_DELAY_MICROS = "microseconds";  // untranslated
Blockly.Msg.ARD_TIME_DELAY_MICRO_TIP = "Wait specific time in microseconds";  // untranslated
Blockly.Msg.ARD_TIME_DELAY_TIP = "Wait specific time in milliseconds";  // untranslated
Blockly.Msg.ARD_TIME_INF = "wait forever (end program)";  // untranslated
Blockly.Msg.ARD_TIME_INF_TIP = "Wait indefinitely, stopping the program.";  // untranslated
Blockly.Msg.ARD_TIME_MICROS = "current elapsed Time (microseconds)";  // untranslated
Blockly.Msg.ARD_TIME_MICROS_TIP = "Returns the number of microseconds since the Arduino board began running the current program. Has to be stored in a positive long integer";  // untranslated
Blockly.Msg.ARD_TIME_MILLIS = "current elapsed Time (milliseconds)";  // untranslated
Blockly.Msg.ARD_TIME_MILLIS_TIP = "Returns the number of milliseconds since the Arduino board began running the current program. Has to be stored in a positive long integer";  // untranslated
Blockly.Msg.ARD_TIME_MS = "milliseconds";  // untranslated
Blockly.Msg.ARD_TONEFREQ = "at frequency";  // untranslated
Blockly.Msg.ARD_TONE_FREQ = "frequency";  // untranslated
Blockly.Msg.ARD_TONE_PIN = "Tone PIN#";  // untranslated
Blockly.Msg.ARD_TONE_PIN_TIP = "Generate audio tones on a pin";  // untranslated
Blockly.Msg.ARD_TONE_TIP = "Sets tone on pin to specified frequency within range 31 - 65535";  // untranslated
Blockly.Msg.ARD_TONE_WARNING = "Frequency must be in range 31 - 65535";  // untranslated
Blockly.Msg.ARD_TYPE_ARRAY = "Array";  // untranslated
Blockly.Msg.ARD_TYPE_BOOL = "Boolean";  // untranslated
Blockly.Msg.ARD_TYPE_CHAR = "Character";  // untranslated
Blockly.Msg.ARD_TYPE_CHILDBLOCKMISSING = "ChildBlockMissing";  // untranslated
Blockly.Msg.ARD_TYPE_DECIMAL = "Decimal";  // untranslated
Blockly.Msg.ARD_TYPE_LONG = "Large Number";  // untranslated
Blockly.Msg.ARD_TYPE_NULL = "Null";  // untranslated
Blockly.Msg.ARD_TYPE_NUMBER = "Number";  // untranslated
Blockly.Msg.ARD_TYPE_SHORT = "Short Number";  // untranslated
Blockly.Msg.ARD_TYPE_TEXT = "Text";  // untranslated
Blockly.Msg.ARD_TYPE_UNDEF = "Undefined";  // untranslated
Blockly.Msg.ARD_VAR_AS = "as";  // untranslated
Blockly.Msg.ARD_VAR_AS_TIP = "Sets a value to a specific type";  // untranslated
Blockly.Msg.ARD_WRITE_TO = "to";  // untranslated
Blockly.Msg.NEW_INSTANCE = "New instance...";  // untranslated
Blockly.Msg.NEW_INSTANCE_TITLE = "New instance name:";  // untranslated
Blockly.Msg.RENAME_INSTANCE = "Rename instance...";  // untranslated
Blockly.Msg.RENAME_INSTANCE_TITLE = "Rename all '%1' instances to:";  // untranslated
Blockly.Msg.cases_add = "Case";  // untranslated
Blockly.Msg.cases_condition = "Case (Variable) = ";  // untranslated
Blockly.Msg.cases_do = "Do";  // untranslated
Blockly.Msg.cases_switch = "Variable";  // untranslated
Blockly.Msg.senseBox_LoRa_app_id = "Application EUI (lsb)";  // untranslated
Blockly.Msg.senseBox_LoRa_app_key = "App Key (msb)";  // untranslated
Blockly.Msg.senseBox_LoRa_appskey_id = "App Session Key (msb)";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_alt = "Altitude";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_analog = "Analog Value";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_analog_tip = "Send a value with one decimal";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_channel = "Channel";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_gps_tip = "Send GPS Data";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_gyros_tip = "Send a value from the Gyroscope";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_humidity = "Humidity";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_humidity_tip = "Send temperature with one decimal";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_lat = "Latitude";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_lng = "Longitude";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_luminosity = "Luminosity";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_luminosity_tip = "Send luminosity";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_pressure = "Pressure";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_pressure_tip = "Send pressure with one decimal";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_temperature = "Temperature";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_temperature_tip = "Send temperature with one decimal";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_tip = "Send Data as Cayenne Payload Format";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_x = "X Value";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_y = "Y Value";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_z = "Z Value";  // untranslated
Blockly.Msg.senseBox_LoRa_connect = "Send to TTN";  // untranslated
Blockly.Msg.senseBox_LoRa_devaddr_id = "Device Adress";  // untranslated
Blockly.Msg.senseBox_LoRa_device_id = "Device EUI (lsb)";  // untranslated
Blockly.Msg.senseBox_LoRa_init_abp_tip = "Initialise the LoRa tranismission. Copy ID's as lsb";  // untranslated
Blockly.Msg.senseBox_LoRa_init_otaa_tip = "Initialise the LoRa tranismission. Copy ID's as lsb";  // untranslated
Blockly.Msg.senseBox_LoRa_interval = "Transmission interval in minutes";  // untranslated
Blockly.Msg.senseBox_LoRa_message_tip = "Send a message with LoRa";  // untranslated
Blockly.Msg.senseBox_LoRa_nwskey_id = "Network Session Key (msb)";  // untranslated
Blockly.Msg.senseBox_LoRa_send_cayenne = "Send as Cayenne Payload";  // untranslated
Blockly.Msg.senseBox_LoRa_send_message = "Send as Lora Message";  // untranslated
Blockly.Msg.senseBox_LoRa_sensor_tip = "Send a value with a specific number of bytes";  // untranslated
Blockly.Msg.senseBox_SD_COMPONENT = "SD-Block";  // untranslated
Blockly.Msg.senseBox_basic_blue  = "Blue";  // untranslated
Blockly.Msg.senseBox_basic_green  = "Gree";  // untranslated
Blockly.Msg.senseBox_basic_red  = "Red";  // untranslated
Blockly.Msg.senseBox_basic_state  = "Status";  // untranslated
Blockly.Msg.senseBox_bme680 = "Environmental sensor (BME680)";  // untranslated
Blockly.Msg.senseBox_bme680_tip = "Returns values from the BME680";  // untranslated
Blockly.Msg.senseBox_bme680_warning = "Warning. Gas (VOC) cannot be measured simultaneously with other parameters.";  // untranslated
Blockly.Msg.senseBox_bme_breatheVocEquivalent = "Breathe VOC Equivalent";  // untranslated
Blockly.Msg.senseBox_bme_co2 = "CO2 Equivalent";  // untranslated
Blockly.Msg.senseBox_bme_iaq = "Indoor Air Quality (IAQ)";  // untranslated
Blockly.Msg.senseBox_bme_iaq_accuracy = "Calibration Value";  // untranslated
Blockly.Msg.senseBox_bme_tip = "Returns values from the BME680";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer  = "Accelerometer";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_direction = "Direction";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_direction_total = "Total";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_direction_x = "X-Axis";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_direction_y = "Y-Axis";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_direction_z = "Z-Axis";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_range = "Range";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_range_16g = "16g";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_range_2g = "2g";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_range_4g = "4g";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_range_8g = "8g";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_tip  = "Measuring the acceleration";  // untranslated
Blockly.Msg.senseBox_bmx055_compass = "Compass";  // untranslated
Blockly.Msg.senseBox_bmx055_compass_tip  = "Gives the ";  // untranslated
Blockly.Msg.senseBox_bmx055_gyroscope  = "Gyroscope";  // untranslated
Blockly.Msg.senseBox_bmx055_gyroscope_tip  = "Lage Sensor";  // untranslated
Blockly.Msg.senseBox_bmx055_x  = "X-Direction";  // untranslated
Blockly.Msg.senseBox_bmx055_y  = "Y-Direction";  // untranslated
Blockly.Msg.senseBox_button  = "Button";  // untranslated
Blockly.Msg.senseBox_button_isPressed = "is Pressed";  // untranslated
Blockly.Msg.senseBox_button_switch = "as Switch";  // untranslated
Blockly.Msg.senseBox_button_tip  = "Button";  // untranslated
Blockly.Msg.senseBox_button_wasPressed = "was Pressed";  // untranslated
Blockly.Msg.senseBox_display_beginDisplay  = "Initialize Display";  // untranslated
Blockly.Msg.senseBox_display_beginDisplay_tip  = "Starts the display";  // untranslated
Blockly.Msg.senseBox_display_black  = "Black";  // untranslated
Blockly.Msg.senseBox_display_clearDisplay  = "Clear Display";  // untranslated
Blockly.Msg.senseBox_display_clearDisplay_tip  = "Clear the display content";  // untranslated
Blockly.Msg.senseBox_display_color  = "Font color";  // untranslated
Blockly.Msg.senseBox_display_fastPrint_dimension = "Unit";  // untranslated
Blockly.Msg.senseBox_display_fastPrint_show = "Show Measurements";  // untranslated
Blockly.Msg.senseBox_display_fastPrint_tip = "Show two measurements with title and dimension on the display";  // untranslated
Blockly.Msg.senseBox_display_fastPrint_title = "Title";  // untranslated
Blockly.Msg.senseBox_display_fastPrint_value = "Measurement";  // untranslated
Blockly.Msg.senseBox_display_filled = "filled";  // untranslated
Blockly.Msg.senseBox_display_plotDisplay  = "Plot Diagram";  // untranslated
Blockly.Msg.senseBox_display_plotTimeFrame = "TimeFrame";  // untranslated
Blockly.Msg.senseBox_display_plotTitle = "Title";  // untranslated
Blockly.Msg.senseBox_display_plotXLabel  = "X-Axis Label";  // untranslated
Blockly.Msg.senseBox_display_plotXRange1  = "X-Range Begin";  // untranslated
Blockly.Msg.senseBox_display_plotXRange2  = "X-Range End";  // untranslated
Blockly.Msg.senseBox_display_plotXTick  = "X-Tick";  // untranslated
Blockly.Msg.senseBox_display_plotYLabel  = "Y-Axis Label";  // untranslated
Blockly.Msg.senseBox_display_plotYRange1 = "Y-Range Begin";  // untranslated
Blockly.Msg.senseBox_display_plotYRange2 = "Y-Range End";  // untranslated
Blockly.Msg.senseBox_display_plotYTick  = "Y-Tick";  // untranslated
Blockly.Msg.senseBox_display_printDisplay  = "Write Text/Number";  // untranslated
Blockly.Msg.senseBox_display_printDisplay_tip  = "Prints Values to the Display, set X and Y Location";  // untranslated
Blockly.Msg.senseBox_display_printDisplay_value  = "value";  // untranslated
Blockly.Msg.senseBox_display_printDisplay_x  = "x-coordinates";  // untranslated
Blockly.Msg.senseBox_display_printDisplay_y  = "y-coordinates";  // untranslated
Blockly.Msg.senseBox_display_setSize  = "set font size to";  // untranslated
Blockly.Msg.senseBox_display_setSize_tip  = "Change the font size. Set a Value between 1-10.";  // untranslated
Blockly.Msg.senseBox_display_white  = "White";  // untranslated
Blockly.Msg.senseBox_foto  = "Light Dependent Resistor";  // untranslated
Blockly.Msg.senseBox_foto_tip  = "simple light depending resistor, gives values between 0 and 1023";  // untranslated
Blockly.Msg.senseBox_gas = "Gas (VOC)";  // untranslated
Blockly.Msg.senseBox_gps_alt = "altitude";  // untranslated
Blockly.Msg.senseBox_gps_begin = "initialize GPS";  // untranslated
Blockly.Msg.senseBox_gps_begin_tip = "initialize GPS Sensor";  // untranslated
Blockly.Msg.senseBox_gps_date = "date";  // untranslated
Blockly.Msg.senseBox_gps_getValues = "GPS-Module";  // untranslated
Blockly.Msg.senseBox_gps_getValues_tip = "gets the specific Value from the GPS Sensor";  // untranslated
Blockly.Msg.senseBox_gps_lat = "latitude";  // untranslated
Blockly.Msg.senseBox_gps_lng = "longitude";  // untranslated
Blockly.Msg.senseBox_gps_speed = "speed";  // untranslated
Blockly.Msg.senseBox_gps_time = "time";  // untranslated
Blockly.Msg.senseBox_gps_timeStamp = "timestamp (RFC 3339)";  // untranslated
Blockly.Msg.senseBox_html_body = "<body>";  // untranslated
Blockly.Msg.senseBox_html_body_end = "</body>";  // untranslated
Blockly.Msg.senseBox_html_document = "HTML";  // untranslated
Blockly.Msg.senseBox_html_document_tip = "A block for generating a HTML document.";  // untranslated
Blockly.Msg.senseBox_html_general_tag_tip = "A general HTML tag building block.";  // untranslated
Blockly.Msg.senseBox_html_header = "<head>";  // untranslated
Blockly.Msg.senseBox_html_header_end = "</head>";  // untranslated
Blockly.Msg.senseBox_http_method = "Method";  // untranslated
Blockly.Msg.senseBox_http_method_tip = "Method of the current HTTP request";  // untranslated
Blockly.Msg.senseBox_http_not_found = "404 Not found";  // untranslated
Blockly.Msg.senseBox_http_not_found_tip = "Send a predefined 404 HTTP response.";  // untranslated
Blockly.Msg.senseBox_http_on_client_connect = "If client is connected:";  // untranslated
Blockly.Msg.senseBox_http_on_client_connect_tip = "Checks if a client is connected and executes given statement in that case.";  // untranslated
Blockly.Msg.senseBox_http_protocol_version = "HTTP Version";  // untranslated
Blockly.Msg.senseBox_http_protocol_version_tip = "The HTTP Version of the current HTTP request";  // untranslated
Blockly.Msg.senseBox_http_success = "Succesful";  // untranslated
Blockly.Msg.senseBox_http_success_l2 = "HTTP reponse";  // untranslated
Blockly.Msg.senseBox_http_success_tip = "Send a successful HTTP response with content.";  // untranslated
Blockly.Msg.senseBox_http_uri = "URI";  // untranslated
Blockly.Msg.senseBox_http_uri_tip = "URI of requested resource of the current HTTP request";  // untranslated
Blockly.Msg.senseBox_http_user_agent = "User-Agent";  // untranslated
Blockly.Msg.senseBox_http_user_agent_tip = "The User-Agent send along with the current HTTP request";  // untranslated
Blockly.Msg.senseBox_hum  = "humidity in %";  // untranslated
Blockly.Msg.senseBox_hum_tip  = "Measures humidity in %";  // untranslated
Blockly.Msg.senseBox_init_http_server = "Initialize HTTP-Server";  // untranslated
Blockly.Msg.senseBox_init_http_server_tip = "Initializes a http server on the specified port.";  // untranslated
Blockly.Msg.senseBox_interval = "ms";  // untranslated
Blockly.Msg.senseBox_interval_timer = "Measuring interval";  // untranslated
Blockly.Msg.senseBox_interval_timer_tip = "Setup an Intervall";  // untranslated
Blockly.Msg.senseBox_ip_address = "IP-Address";  // untranslated
Blockly.Msg.senseBox_ip_address_tip = "Returns the IP address as a string.";  // untranslated
Blockly.Msg.senseBox_ir  = "infrared distance sensor";  // untranslated
Blockly.Msg.senseBox_ir_tip  = "infrared distance sensor can measure the distance between 10 and 80 cm";  // untranslated
Blockly.Msg.senseBox_led  = "LED connected to digital";  // untranslated
Blockly.Msg.senseBox_led_tip  = "simple LED. Don't forget the resistor";  // untranslated
Blockly.Msg.senseBox_light  = "Illuminance in Lux";  // untranslated
Blockly.Msg.senseBox_lux  = "lightsensor";  // untranslated
Blockly.Msg.senseBox_lux_tip  = "Light Sensor can measure the illuminance in lux";  // untranslated
Blockly.Msg.senseBox_measurement = "Measurement";  // untranslated
Blockly.Msg.senseBox_measurements = "Measurements";  // untranslated
Blockly.Msg.senseBox_off  = "off";  // untranslated
Blockly.Msg.senseBox_on  = "on";  // untranslated
Blockly.Msg.senseBox_osem_access_token = "API Key";  // untranslated
Blockly.Msg.senseBox_osem_connection  = "Connect to openSenseMap";  // untranslated
Blockly.Msg.senseBox_osem_connection_tip  = "";  // untranslated
Blockly.Msg.senseBox_osem_exposure = "Type";  // untranslated
Blockly.Msg.senseBox_osem_host = "opensensemap.org";  // untranslated
Blockly.Msg.senseBox_osem_host_workshop = "workshop.opensensemap.org";  // untranslated
Blockly.Msg.senseBox_osem_mobile = "Mobile";  // untranslated
Blockly.Msg.senseBox_osem_restart = "Restart if device was disconnected?";  // untranslated
Blockly.Msg.senseBox_osem_stationary = "Stationary";  // untranslated
Blockly.Msg.senseBox_output_filename  = "filename";  // untranslated
Blockly.Msg.senseBox_output_format  = "format:";  // untranslated
Blockly.Msg.senseBox_output_linebreak  = "linebreak";  // untranslated
Blockly.Msg.senseBox_output_networkid  = "networkID";  // untranslated
Blockly.Msg.senseBox_output_password  = "Password";  // untranslated
Blockly.Msg.senseBox_output_safetosd  = "safe to sd";  // untranslated
Blockly.Msg.senseBox_output_safetosd_tip  = "Save Measurment to SD-Card";  // untranslated
Blockly.Msg.senseBox_output_serialprint  = "Print on Serial Monitor";  // untranslated
Blockly.Msg.senseBox_output_timestamp  = "timestamp";  // untranslated
Blockly.Msg.senseBox_piezo_tip  = "simple piezo to make sound";  // untranslated
Blockly.Msg.senseBox_poti  = "Potentiometer";  // untranslated
Blockly.Msg.senseBox_poti_tip  = "Potentiometer";  // untranslated
Blockly.Msg.senseBox_pressure  = "Airpressure in Pa";  // untranslated
Blockly.Msg.senseBox_pressure_referencePressure = "Pressure at Sea Level";  // untranslated
Blockly.Msg.senseBox_pressure_referencePressure_dim = "hPa";  // untranslated
Blockly.Msg.senseBox_pressure_sensor  = "Airpressure/Temperature Sensor (BMP280)";  // untranslated
Blockly.Msg.senseBox_pressure_tip  = "airpressure sensor can measure the airpressure in Pa";  // untranslated
Blockly.Msg.senseBox_rgb_led  = "RGB-LED";  // untranslated
Blockly.Msg.senseBox_rgb_led_tip  = "RGB-LED";  // untranslated
Blockly.Msg.senseBox_scd30 = "CO2 Sensor (Sensirion SCD30)";  // untranslated
Blockly.Msg.senseBox_scd_co2 = "CO2 in ppm";  // untranslated
Blockly.Msg.senseBox_scd_tip = "Returns value of the CO2 Sensor";  // untranslated
Blockly.Msg.senseBox_sd_create_file  = "Create file on SD-Card";  // untranslated
Blockly.Msg.senseBox_sd_decimals = "decimals";  // untranslated
Blockly.Msg.senseBox_sd_open_file  = "Open a file from SD-Card";  // untranslated
Blockly.Msg.senseBox_sd_web_readHTML = "Read HTML from SD Card";  // untranslated
Blockly.Msg.senseBox_sd_write_file  = " Write Data to SD-Card";  // untranslated
Blockly.Msg.senseBox_sds011  = "Fine Particular Sensor";  // untranslated
Blockly.Msg.senseBox_sds011_dimension  = "in µg/m³ at";  // untranslated
Blockly.Msg.senseBox_sds011_pm10  = "PM10";  // untranslated
Blockly.Msg.senseBox_sds011_pm25  = "PM2.5";  // untranslated
Blockly.Msg.senseBox_sds011_serial1  = "Serial1";  // untranslated
Blockly.Msg.senseBox_sds011_serial2  = "Serial2";  // untranslated
Blockly.Msg.senseBox_sds011_tip  = "Measuring the fine particular concentration";  // untranslated
Blockly.Msg.senseBox_send_mobile_to_osem = "Send measurement and location to openSenseMap";  // untranslated
Blockly.Msg.senseBox_send_mobile_to_osem_tip = "Send Value and Location to openSenseMap";  // untranslated
Blockly.Msg.senseBox_send_to_osem  = "Send measurement to openSenseMap";  // untranslated
Blockly.Msg.senseBox_send_to_osem_tip  = "sends the measurement to openSenseMap. Make shure to enter the correct BoxID and SensorID";  // untranslated
Blockly.Msg.senseBox_sensor  = "Sensors";  // untranslated
Blockly.Msg.senseBox_serial_tip  = "prints the values to the serial monitor in the arduino IDE. Good way to have a fast and easy feedback for your programm";  // untranslated
Blockly.Msg.senseBox_soil = "Soil Moisture";  // untranslated
Blockly.Msg.senseBox_sound  = "Microphone";  // untranslated
Blockly.Msg.senseBox_sound_tip  = "This block returns the measured value of the microphone in volts.";  // untranslated
Blockly.Msg.senseBox_soundsensor_dfrobot = "Soundsensor";  // untranslated
Blockly.Msg.senseBox_tag_first_mutator_tip = "Mandatory children to this block.";  // untranslated
Blockly.Msg.senseBox_tag_optional_mutator_tip = "Add more children to the block.";  // untranslated
Blockly.Msg.senseBox_telegram_do = "Telegram do";  // untranslated
Blockly.Msg.senseBox_telegram_do_on_message = "on message";  // untranslated
Blockly.Msg.senseBox_telegram_init = "Initialize Telegram Bot";  // untranslated
Blockly.Msg.senseBox_telegram_message = "Message";  // untranslated
Blockly.Msg.senseBox_telegram_send = "Send Message";  // untranslated
Blockly.Msg.senseBox_telegram_token = "Token";  // untranslated
Blockly.Msg.senseBox_temp  = "Temperature in °C";  // untranslated
Blockly.Msg.senseBox_temp_hum  = "Temperature/Humidity Sensor (HDC1080)";  // untranslated
Blockly.Msg.senseBox_temp_hum_tip  = "Sensor measuring temperature and humidity";  // untranslated
Blockly.Msg.senseBox_ultrasonic  = "Ultrasonic distance sensor at Port";  // untranslated
Blockly.Msg.senseBox_ultrasonic_echo = "Echo";  // untranslated
Blockly.Msg.senseBox_ultrasonic_port_A = "A";  // untranslated
Blockly.Msg.senseBox_ultrasonic_port_B = "B";  // untranslated
Blockly.Msg.senseBox_ultrasonic_port_C = "C";  // untranslated
Blockly.Msg.senseBox_ultrasonic_tip  = "ultrasonic distance sensor";  // untranslated
Blockly.Msg.senseBox_ultrasonic_trigger = "Trigger";  // untranslated
Blockly.Msg.senseBox_uv  = "UV-Light in µW/cm²";  // untranslated
Blockly.Msg.senseBox_uv_light  = "Light Visible + UV";  // untranslated
Blockly.Msg.senseBox_uv_light_tip  = "Sensor measuring the UV-light and the illuminance";  // untranslated
Blockly.Msg.senseBox_value  = "value:";  // untranslated
Blockly.Msg.senseBox_watertemperature = "Water Temperature";  // untranslated
Blockly.Msg.senseBox_wifi_connect = "Connect to Wifi";  // untranslated
Blockly.Msg.senseBox_wifi_ssid = "Networkname";  // untranslated
Blockly.Msg.senseBox_wifi_startap = "Initialize Wifi Access Point";  // untranslated
Blockly.Msg.senseBox_wifi_tip  = "Establishes a wifi connection";  // untranslated
Blockly.Msg.senseBox_windspeed = "Windspeed";  // untranslated
Blockly.Msg.senseBox_ws2818_rgb_led = "Set ";  // untranslated
Blockly.Msg.senseBox_ws2818_rgb_led_brightness = "Brightness";  // untranslated
Blockly.Msg.senseBox_ws2818_rgb_led_color = "Color";  // untranslated
Blockly.Msg.senseBox_ws2818_rgb_led_init = "Initialise RGB-LED (WS2818)";  // untranslated
Blockly.Msg.senseBox_ws2818_rgb_led_number = "Number of RGB-LEDs";  // untranslated
Blockly.Msg.senseBox_ws2818_rgb_led_pin = "at Pin:";  // untranslated
Blockly.Msg.senseBox_ws2818_rgb_led_position = "Position";  // untranslated
Blockly.Msg.sensebox_display_drawRectangle = "Draw Rectangle";  // untranslated
Blockly.Msg.sensebox_display_drawRectangle_height = "height";  // untranslated
Blockly.Msg.sensebox_display_drawRectangle_width = "width";  // untranslated
Blockly.Msg.sensebox_display_fillCircle = "Draw Point";  // untranslated
Blockly.Msg.sensebox_display_fillCircle_radius = "Radius";  // untranslated
Blockly.Msg.sensebox_display_show  = "Print on Display";  // untranslated
Blockly.Msg.sensebox_display_show_tip  = "Print on Display";  // untranslated
Blockly.Msg.sensebox_sd_filename = "data";  // untranslated
Blockly.Msg.sensebox_soil_smt50 = "Soil Moisture and Temperature (SMT50)";  // untranslated
Blockly.Msg.sensebox_web_readHTML_filename = "File:";  // untranslated
