// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.hrx');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Kommentar hinzufüche";
Blockly.Msg.AUTH = "Weart ännre:";
Blockly.Msg.CHANGE_VALUE_TITLE = "Neie Variable...";
Blockly.Msg.CHAT = "Sprech mit unsrem Mitoorweiter doorrich renschreiwe von Text hier in den Kaste!";
Blockly.Msg.CLEAN_UP = "Clean up Blocks";  // untranslated
Blockly.Msg.COLLAPSE_ALL = "Blocke zusammerfalte";
Blockly.Msg.COLLAPSE_BLOCK = "Block zusammerfalte";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "Farreb 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "mit Farreb 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";  // untranslated
Blockly.Msg.COLOUR_BLEND_RATIO = "im Verhältniss";
Blockly.Msg.COLOUR_BLEND_TITLE = "misch";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Vermischt 2 Farwe mit konfigurierbare Farrebverhältniss (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://hrx.wikipedia.org/wiki/Farreb";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Wähl en Farreb von der Palett.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";  // untranslated
Blockly.Msg.COLOUR_RANDOM_TITLE = "zufälliche Farwe";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Wähl en Farreb noh dem Zufallsprinzip.";
Blockly.Msg.COLOUR_RGB_BLUE = "blau";
Blockly.Msg.COLOUR_RGB_GREEN = "grün";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";  // untranslated
Blockly.Msg.COLOUR_RGB_RED = "rot";
Blockly.Msg.COLOUR_RGB_TITLE = "Färreb mit";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Kreiere ene Farreb mit sellrbst definierte rot, grün und blau Wearte. All Wearte müsse zwischich 0 und 100 liehe.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "ausbreche aus der Schleif";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "mit der nächste Iteration fortfoohre aus der Schleifa";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Die umgebne Schleif beenne.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Die Oonweisung abbreche und mit der nächste Schleifiteration fortfoohre.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Warnung: Die block sollt nuar in en Schleif verwennet sin.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
Blockly.Msg.CONTROLS_FOREACH_TITLE = "Für Weart %1 aus der List %2";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "Füahr en Oonweisung für jede Weart in der List aus und setzt dabei die Variable \"%1\" uff den aktuelle List Weart.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg.CONTROLS_FOR_TITLE = "Zähl %1 von %2 bis %3 mit %4";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Zähl die Variable \"%1\" von enem Startweart bis zu enem Zielweart und füahrefür jede Weart en Oonweisung aus.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "En weitre Bedingung hinzufüche.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "En orrer Bedingung hinzufüche, füahrt en Oonweisung aus falls ken Bedingung zutrifft.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Hinzufüche, entferne orrer sortiere von Sektione";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "orrer";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "orrer wenn";
Blockly.Msg.CONTROLS_IF_MSG_IF = "wenn";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Wenn en Bedingung woahr (true) ist, dann füahr en Oonweisung aus.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Wenn en Bedingung woahr (true) ist, dann füahr die earscht Oonweisung aus.  Ansonscht füahr die zwooite Oonweisung aus.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Wenn der erschte Bedingung woahr (true) ist, dann füahr die erschte Oonweisung aus.  Orrer wenn die zwooite Bedingung woahr (true) ist, dann füahr die zwooite Oonweisung aus.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Wenn der erscht Bedingung woahr (true) ist, dann füahr die erschte Oonweisung aus.  Orrer wenn die zwooite Bedingung woahr (true) ist, dann füahr die zwooite Oonweisung aus.  Falls ken der beide Bedingungen woahr (true) ist, dann füahr die dritte Oonweisung aus.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://hrx.wikipedia.org/wiki/For-Schleif";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "mach";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "wiederhol %1 mol";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "En Oonweisung meahrfach ausführe.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "Repetiere bis";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "Repetier solang";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Füahr die Oonweisung solang aus wie die Bedingung falsch (false) ist.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Füahr die Oonweisung solang aus wie die Bedingung woahr (true) ist.";
Blockly.Msg.DELETE_ALL_BLOCKS = "All %1 Bausten lösche?";
Blockly.Msg.DELETE_BLOCK = "Block lösche";
Blockly.Msg.DELETE_X_BLOCKS = "Block %1 lösche";
Blockly.Msg.DISABLE_BLOCK = "Block deaktivieren";
Blockly.Msg.DUPLICATE_BLOCK = "Kopieren";
Blockly.Msg.ENABLE_BLOCK = "Block aktivieren";
Blockly.Msg.EXPAND_ALL = "Blocke expandiere";
Blockly.Msg.EXPAND_BLOCK = "Block entfalte";
Blockly.Msg.EXTERNAL_INPUTS = "External Inputsexterne Ingänge";
Blockly.Msg.HELP = "Hellef";
Blockly.Msg.INLINE_INPUTS = "interne Ingänge";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "Generier/erzeich en leear List";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Generier/erzeich en leear List ohne Inhalt.";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "List";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Hinzufüche, entferne und sortiere von Elemente.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "Erzeich List mit";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "En Element zur List hinzufüche.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Generier/erzeich en List mit konfigurierte Elemente.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "earste";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "#te von hinne";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_GET = "Nehm";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "Nehm und entfern";
Blockly.Msg.LISTS_GET_INDEX_LAST = "letzte";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "zufälliches";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "Entfern";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Extrahiert das earste Element von der List.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Extrahiert das #1te Element der List sei End.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Extrahiert das #1te Element von der List.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Extrahiert das letzte Element von der List.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Extrahiert en zufälliches Element von der List.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Extrahiert und entfernt das earste Element von der List.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Extrahiert und entfernt das #1te Element der List sei End.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Extrahiert und entfernt das #1te Element von der List.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Extrahiert und entfernt das letzte Element von der List.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Extrahiert und entfernt en zufälliches Element von der List.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Entfernt das earste Element von der List.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Entfernt das #1te Element der List sei End.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Entfernt das #1te Element von der List.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Entfernt das letzte Element von der List.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Entfernt en zufälliches Element von der List.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "zu # vom End";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "zu #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "zum Letzte";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "hol Unnerliste vom Earste";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "hol Unnerliste von # vom End";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "hol Unnerlist von #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Generiert en Kopie von en definierte Tel von en List.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "Such earstes Voarkommniss";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_LAST = "Such letztes Voarkommniss";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Sucht die Position (index) von en Element in der List Gebt 0 zurück wenn nixs gefunn woard.";
Blockly.Msg.LISTS_INLIST = "in der List";
Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 ist leear?";
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Ist woahr (true), wenn die List leear ist.";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg.LISTS_LENGTH_TITLE = "länge %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Die Oonzoohl von Elemente in der List.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_REPEAT_TITLE = "Erzich List mit Element %1 wiederhol das %2 mol";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Erzeicht en List mit en variable Oonzoohl von Elemente";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "uff";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "tue ren setz an";
Blockly.Msg.LISTS_SET_INDEX_SET = "setz";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Tut das Element an en Oonfang von en List ren setze.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Tut das Element ren setze an en definierte Position an en List.  #1 ist das letzte Element.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Tut das Element ren setze an en definierte Position an en List.  #1 ist das earschte Element.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Oonhängt das Element zu en List sei End.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Tut das Element zufällich an en List ren setze.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Sets the first item in a list.Setzt das earschte Element an en list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Setzt das Element zu en definierte Position an en List. #1 ist das letzte Element.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Setzt das Element zu en definierte Stell in en List.  #1 ist das earschte Element.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Setzt das letzte Element an en List.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Setzt en zufälliches Element an en List.";
Blockly.Msg.LISTS_SORT_HELPURL = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";  // untranslated
Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = "ascending";  // untranslated
Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = "descending";  // untranslated
Blockly.Msg.LISTS_SORT_TITLE = "sort %1 %2 %3";  // untranslated
Blockly.Msg.LISTS_SORT_TOOLTIP = "Sort a copy of a list.";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = "alphabetic, ignore case";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = "numeric";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_TEXT = "alphabetic";  // untranslated
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "make list from text";  // untranslated
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "make text from list";  // untranslated
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Join a list of texts into one text, separated by a delimiter.";  // untranslated
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Split text into a list of texts, breaking at each delimiter.";  // untranslated
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "with delimiter";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "falsch";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Ist entweder woahr (true) orrer falsch (false)";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "woahr";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://hrx.wikipedia.org/wiki/Vergleich_%28Zahlen%29";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Ist woahr (true) wenn beide Wearte identisch sind.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Ist woahr (true) wenn der erschte Weart grösser als der zwooite Weart ist.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Ist woahr (true) wenn der erschte Weart grösser als orrer gleich gross wie zwooite Weart ist.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Ist woahr (true) wenn der earschte Weart klener als der zwooite Weart ist.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Ist woahr (true) wenn der earscht Weart klener als orrer gleich gross wie zwooite Weart ist.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Ist woahr (true) wenn beide Wearte unnerschiedlich sind.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
Blockly.Msg.LOGIC_NEGATE_TITLE = "net %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Ist woahr (true) wenn der Ingäweweart falsch (false) ist.  Ist falsch (false) wenn der Ingäweweart woahr (true) ist.";
Blockly.Msg.LOGIC_NULL = "null";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Is NULL.";
Blockly.Msg.LOGIC_OPERATION_AND = "und";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg.LOGIC_OPERATION_OR = "orrer";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Ist woahr (true) wenn beide Wearte woahr (true) sind.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Ist woahr (true) wenn en von der beide Wearte woahr (true) ist.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "wenn falsch";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "wenn woahr";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Üwerprüft en Bedingung \"test\". Wenn die Bedingung woahr ist weerd der \"wenn woahr\" Weart zurückgeb, annerfalls der \"wenn falsch\" Weart";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://hrx.wikipedia.org/wiki/Grundrechenoort";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Ist die Summe zwooier Wearte.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Ist der Quotient zwooier Wearte.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Ist die Differenz zwooier Wearte.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Ist das Produkt zwooier Wearte.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Ist der earschte Weart potenziert mit dem zoiten Weart.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://hrx.wikipedia.org/wiki/Inkrement_und_Dekrement";
Blockly.Msg.MATH_CHANGE_TITLE = "mach höcher / erhöhe %1 um %2";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Addiert en Weart zur Variable \"%1\" hinzu.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://hrx.wikipedia.org/wiki/Mathematische_Konstante";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Mathematische Konstante wie: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…) oder ∞ (unendlich).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";  // untranslated
Blockly.Msg.MATH_CONSTRAIN_TITLE = "begrenze %1 von %2 bis %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Begrenzt den Weartebereich mittels von / bis Wearte. (inklusiv)";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";  // untranslated
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "ist telbar/kann getelt sin doorrich";
Blockly.Msg.MATH_IS_EVEN = "ist grood";
Blockly.Msg.MATH_IS_NEGATIVE = "ist negativ";
Blockly.Msg.MATH_IS_ODD = "ist ungrood";
Blockly.Msg.MATH_IS_POSITIVE = "ist positiv";
Blockly.Msg.MATH_IS_PRIME = "ist en Primenzoohl";
Blockly.Msg.MATH_IS_TOOLTIP = "Üwerprüft ob en Zoohl grood, ungrood, en Primenzoohl, ganzzoohlich, positiv, negativ orrer doorrich en zwooite Zoohl telbar ist.  Gebt woahr (true) orrer falsch (false) zurück.";
Blockly.Msg.MATH_IS_WHOLE = "ganze Zoohl";
Blockly.Msg.MATH_MODULO_HELPURL = "https://hrx.wikipedia.org/wiki/Modulo";
Blockly.Msg.MATH_MODULO_TITLE = "Rest von %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Der Rest noh en Division.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";  // untranslated
Blockly.Msg.MATH_NUMBER_HELPURL = "https://hrx.wikipedia.org/wiki/Zoohl";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "En Zoohl.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";  // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "Mittelweart en List";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "Maximalweart en List";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "Median von en List";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "Minimalweart von en List";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "Restweart von en List";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "Zufallsweart von en List";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "Standart/Padrong Abweichung von en List";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "Summe von en List";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Ist der Doorrichschnittsweart von aller Wearte in en List.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Ist der grösste Weart in en List.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Ist der Zentralweart von aller Wearte in en List.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Ist der klenste Weart in en List.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Findt den am häifichste voarkommend Weart in en List.  Falls ken Weart öftersch voarkomme als all annre, weard die originale List zurückgeche";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Geb en Zufallsweart aus der List zurück.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Ist die standartiesierte/padronisierte Standartabweichung/Padrongabweichung von aller Wearte in der List";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Ist die Summ aller Wearte in en List.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://hex.wikipedia.org/wiki/Zufallszoohle";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "Zufallszoohl (0.0 -1.0)";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Generier/erzeich en Zufallszoohl zwischich 0.0 (inklusiv) und 1.0 (exklusiv).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://hrx.wikipedia.org/wiki/Zufallszahlen";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "ganzoohlicher Zufallswearte zwischich %1 bis %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Generier/erzeich en ganzähliche Zufallsweart zwischich zwooi Wearte (inklusiv).";
Blockly.Msg.MATH_ROUND_HELPURL = "https://hrx.wikipedia.org/wiki/Runden";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "runde";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "ab runde";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "uff runde";
Blockly.Msg.MATH_ROUND_TOOLTIP = "En Zoohl uff orrer ab runde.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://hrx.wikipedia.org/wiki/Quadratwoorzel";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "Absolutweart";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "Quadratwoorzel";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Ist der Absolutweart von en Weart.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Ist Weart von der Exponentialfunktion von en Weart.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Ist der natüarliche Logarithmus von en Weart.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Ist der dekoodische Logarithmus von en Weart.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Negiert en Weart.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Rechnet 10 hoch Ingäbweart.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Ist die Qudratwoorzel von en Weart.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";  // untranslated
Blockly.Msg.MATH_TRIG_ACOS = "acos";  // untranslated
Blockly.Msg.MATH_TRIG_ASIN = "asin";  // untranslated
Blockly.Msg.MATH_TRIG_ATAN = "atan";  // untranslated
Blockly.Msg.MATH_TRIG_COS = "cos";  // untranslated
Blockly.Msg.MATH_TRIG_HELPURL = "https://hrx.wikipedia.org/wiki/Trigonometrie";
Blockly.Msg.MATH_TRIG_SIN = "sin";  // untranslated
Blockly.Msg.MATH_TRIG_TAN = "tan";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Ist der Arcuscosinus von en Ingabweart.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Ist der Arcussinus von en Ingäbweart.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Ist der Arcustangens von en Ingäbweart.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Ist der Cosinus von en Winkel.";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Ist der Sinus von en Winkel.";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Ist der Tangens von en Winkel.";
Blockly.Msg.ME = "Ich";
Blockly.Msg.NEW_VARIABLE = "Neie Variable...";
Blockly.Msg.NEW_VARIABLE_TITLE = "Die neie Variable sei Noome:";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";  // untranslated
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "allow statements";  // untranslated
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "mit:";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://hrx.wikipedia.org/wiki/Prozedur_%28Programmierung%29";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Ruf en Funktionsblock ohne Rückgäweart uff.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://hrx.wikipedia.org/wiki/Prozedur_%28Programmierung%29";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Ruf en Funktionsblock mit Rückgäbweart uff.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "mit:";
Blockly.Msg.PROCEDURES_CREATE_DO = "Generier/erzeich \"Uffruf %1\"";
Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "Describe this function...";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "Funktionsblock";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "zu";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "En Funktionsblock ohne Rückgäbweart.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "geb zurück";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "En Funktionsblock mit Rückgäbweart.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Warnung: die Funktionsblock hot doppelt Parameter.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Markiear Funktionsblock";
Blockly.Msg.PROCEDURES_IFRETURN_HELPURL = "http://c2.com/cgi/wiki?GuardClause";  // untranslated
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Wenn der earste Weart woahr (true) ist, Geb den zwooite Weart zurück.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Warnung: Der Block därref nuar innich en Funktionsblock genutzt sin.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "Markiear Funktionsblock";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Generier/erzeich \"Uffruf %1\"";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "Parameter";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Variable:";
Blockly.Msg.REDO = "Redo";  // untranslated
Blockly.Msg.REMOVE_COMMENT = "Kommentar entferne";
Blockly.Msg.RENAME_VARIABLE = "Die neie Variable sei Noome:";
Blockly.Msg.RENAME_VARIABLE_TITLE = "All \"%1\" Variable umbenenne in:";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "Text oonhänge";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_APPEND_TO = "An";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Text an die Variable \"%1\" oonhänge.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "umwandle in klenbuchstoobe";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "umwandle in Wörter";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "umwandle in GROSSBUCHSTOOBE";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Wandelt Schreibweise von Texte um, in Grossbuchstoobe, Klenbuchstoobe orrer den earste Buchstoob von jedes Wort gross und die annre klen.";
Blockly.Msg.TEXT_CHARAT_FIRST = "hol earschte Buchstoob";
Blockly.Msg.TEXT_CHARAT_FROM_END = "hol Buchstoob # von End";
Blockly.Msg.TEXT_CHARAT_FROM_START = "hol Buchstoob #";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "in Text";
Blockly.Msg.TEXT_CHARAT_LAST = "hol letztes Wort";
Blockly.Msg.TEXT_CHARAT_RANDOM = "hol zufälliches Buchstoob";
Blockly.Msg.TEXT_CHARAT_TAIL = "";  // untranslated
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Extrahiear en Buchstoob von en spezifizierte Position.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "En Element zum Text hinzufüche.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "verbinne";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Hinzufüche, entfernne und sortiere von Elemente.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "bis #te Buchstoob von hinne";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "bis Buchstoob #te";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "bis letzte Buchstoob";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "in Text";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "earschte Buchstoob";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "hol #te Buchstoob von hinne";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "hol substring Buchstoob #te";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Schickt en bestimmstes Tel von dem Text retuar.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "im Text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "Such der Begriff sein earstes Voarkommniss";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "Suche der Begriff sein letztes Vorkommniss.";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";  // untranslated
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Findt das earste / letzte Voarkommniss von en Suchbegriffes in enem Text.  Gebt die Position von dem Begriff orrer 0 zurück.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 ist leer?";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Ist woahr (true), wenn der Text leer ist.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "Erstell Text aus";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Erstellt en Text doorrich das verbinne von mehre Textelemente.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_LENGTH_TITLE = "läng %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Die Oonzoohl von Zeiche in enem Text. (inkl. Leerzeiche)";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg.TEXT_PRINT_TITLE = "Ausgäb %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Geb den Inhalt von en Variable aus.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Frocht den Benutzer noh en Zoohl.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Frocht den Benutzer noh enem Text.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "Frächt noh Zoohl mit Hinweis";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "Frocht noh Text mit Hinweis";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)https://hrx.wikipedia.org/wiki/Zeichenkette";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "En Buchstoob, Text orrer Satz.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "entfern Leerzeiche von Oonfang und End Seite";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "entferne Leerzeiche von Oonfang Seite";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "entferne Leerzeiche von End Seite von";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Entfernt Leerzeiche vom Oonfang und / orrer End von en Text.";
Blockly.Msg.TODAY = "Today";  // untranslated
Blockly.Msg.UNDO = "Undo";  // untranslated
Blockly.Msg.VARIABLES_DEFAULT_NAME = "Element";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Generier/erzeiche \"Schreibe %1\"";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Gebt der Variable sein Weart zurück.";
Blockly.Msg.VARIABLES_SET = "Schreib %1 zu %2";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Generier/erzeich \"Lese %1\"";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Setzt en Variable sei Weart.";
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;

// Ardublockly strings
Blockly.Msg.ARD_ANALOGREAD = "read analog pin#";  // untranslated
Blockly.Msg.ARD_ANALOGREAD_TIP = "Return value between 0 and 1024";  // untranslated
Blockly.Msg.ARD_ANALOGWRITE = "set analog pin#";  // untranslated
Blockly.Msg.ARD_ANALOGWRITE_TIP = "Write analog value between 0 and 255 to a specific PWM Port";  // untranslated
Blockly.Msg.ARD_BUILTIN_LED = "set built-in LED";  // untranslated
Blockly.Msg.ARD_BUILTIN_LED_TIP = "Light on or off for the built-in LED of the Arduino";  // untranslated
Blockly.Msg.ARD_COMPONENT_WARN1 = "A %1 configuration block with the same %2 name must be added to use this block!";  // untranslated
Blockly.Msg.ARD_DEFINE = "Define";  // untranslated
Blockly.Msg.ARD_DIGITALREAD = "read digital pin#";  // untranslated
Blockly.Msg.ARD_DIGITALREAD_TIP = "Read digital value on a pin: HIGH or LOW";  // untranslated
Blockly.Msg.ARD_DIGITALWRITE = "set digitial pin#";  // untranslated
Blockly.Msg.ARD_DIGITALWRITE_TIP = "Write digital value HIGH or LOW to a specific Port";  // untranslated
Blockly.Msg.ARD_FUN_RUN_LOOP = "Arduino loop forever:";  // untranslated
Blockly.Msg.ARD_FUN_RUN_SETUP = "Arduino run first:";  // untranslated
Blockly.Msg.ARD_FUN_RUN_TIP = "Defines the Arduino setup() and loop() functions.";  // untranslated
Blockly.Msg.ARD_HIGH = "HIGH";  // untranslated
Blockly.Msg.ARD_HIGHLOW_TIP = "Set a pin state logic High or Low.";  // untranslated
Blockly.Msg.ARD_LOW = "LOW";  // untranslated
Blockly.Msg.ARD_MAP = "Map Value";  // untranslated
Blockly.Msg.ARD_MAP_FROMMAX = "from Max";  // untranslated
Blockly.Msg.ARD_MAP_FROMMIN = "from Min";  // untranslated
Blockly.Msg.ARD_MAP_TIP = "Re-maps a number from [0-1024] to another.";  // untranslated
Blockly.Msg.ARD_MAP_TOMAX = "to Max";  // untranslated
Blockly.Msg.ARD_MAP_TOMIN = "to Min";  // untranslated
Blockly.Msg.ARD_MAP_VAL = "value to [0-";  // untranslated
Blockly.Msg.ARD_NOTONE = "Turn off tone on pin #";  // untranslated
Blockly.Msg.ARD_NOTONE_PIN = "No tone PIN#";  // untranslated
Blockly.Msg.ARD_NOTONE_PIN_TIP = "Stop generating a tone on a pin";  // untranslated
Blockly.Msg.ARD_NOTONE_TIP = "Turns the tone off on the selected pin";  // untranslated
Blockly.Msg.ARD_PIN_WARN1 = "Pin %1 is needed for %2 as pin %3. Already used as %4.";  // untranslated
Blockly.Msg.ARD_PULSETIMEOUT_TIP = "Measures the duration of a pulse on the selected pin, if it is within the time-out in microseconds.";  // untranslated
Blockly.Msg.ARD_PULSE_READ = "measure %1 pulse on pin #%2";  // untranslated
Blockly.Msg.ARD_PULSE_READ_TIMEOUT = "measure %1 pulse on pin #%2 (timeout after %3 μs)";  // untranslated
Blockly.Msg.ARD_PULSE_TIP = "Measures the duration of a pulse on the selected pin.";  // untranslated
Blockly.Msg.ARD_SERIAL_BPS = "bps";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT = "print";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT_NEWLINE = "add new line";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT_TIP = "Prints data to the console/serial port as human-readable ASCII text.";  // untranslated
Blockly.Msg.ARD_SERIAL_PRINT_WARN = "A setup block for %1 must be added to the workspace to use this block!";  // untranslated
Blockly.Msg.ARD_SERIAL_SETUP = "Setup";  // untranslated
Blockly.Msg.ARD_SERIAL_SETUP_TIP = "Selects the speed for a specific Serial peripheral";  // untranslated
Blockly.Msg.ARD_SERIAL_SPEED = ":  speed to";  // untranslated
Blockly.Msg.ARD_SERVO_READ = "read SERVO from PIN#";  // untranslated
Blockly.Msg.ARD_SERVO_READ_TIP = "Read a Servo angle";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE = "set SERVO from Pin";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE_DEG_180 = "Degrees (0~180)";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE_TIP = "Set a Servo to an specified angle";  // untranslated
Blockly.Msg.ARD_SERVO_WRITE_TO = "to";  // untranslated
Blockly.Msg.ARD_SETTONE = "Set tone on pin #";  // untranslated
Blockly.Msg.ARD_SPI_SETUP = "Setup";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_CONF = "configuration:";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_DIVIDE = "clock divide";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_LSBFIRST = "LSBFIRST";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE = "SPI mode (idle - edge)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE0 = "0 (Low - Falling)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE1 = "1 (Low - Rising)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE2 = "2 (High - Falling)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MODE3 = "3 (High - Rising)";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_MSBFIRST = "MSBFIRST";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_SHIFT = "data shift";  // untranslated
Blockly.Msg.ARD_SPI_SETUP_TIP = "Configures the SPI peripheral.";  // untranslated
Blockly.Msg.ARD_SPI_TRANSRETURN_TIP = "Send a SPI message to an specified slave device and get data back.";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_NONE = "none";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_SLAVE = "to slave pin";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_TIP = "Send a SPI message to an specified slave device.";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_VAL = "transfer";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_WARN1 = "A setup block for %1 must be added to the workspace to use this block!";  // untranslated
Blockly.Msg.ARD_SPI_TRANS_WARN2 = "Old pin value %1 is no longer available.";  // untranslated
Blockly.Msg.ARD_STEPPER_COMPONENT = "stepper";  // untranslated
Blockly.Msg.ARD_STEPPER_DEFAULT_NAME = "MyStepper";  // untranslated
Blockly.Msg.ARD_STEPPER_FOUR_PINS = "4";  // untranslated
Blockly.Msg.ARD_STEPPER_MOTOR = "stepper motor:";  // untranslated
Blockly.Msg.ARD_STEPPER_NUMBER_OF_PINS = "Number of pins";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN1 = "pin1#";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN2 = "pin2#";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN3 = "pin3#";  // untranslated
Blockly.Msg.ARD_STEPPER_PIN4 = "pin4#";  // untranslated
Blockly.Msg.ARD_STEPPER_REVOLVS = "how many steps per revolution";  // untranslated
Blockly.Msg.ARD_STEPPER_SETUP = "Setup stepper motor";  // untranslated
Blockly.Msg.ARD_STEPPER_SETUP_TIP = "Configures a stepper motor pinout and other settings.";  // untranslated
Blockly.Msg.ARD_STEPPER_SPEED = "set speed (rpm) to";  // untranslated
Blockly.Msg.ARD_STEPPER_STEP = "move stepper";  // untranslated
Blockly.Msg.ARD_STEPPER_STEPS = "steps";  // untranslated
Blockly.Msg.ARD_STEPPER_STEP_TIP = "Turns the stepper motor a specific number of steps.";  // untranslated
Blockly.Msg.ARD_STEPPER_TWO_PINS = "2";  // untranslated
Blockly.Msg.ARD_TIME_DELAY = "wait";  // untranslated
Blockly.Msg.ARD_TIME_DELAY_MICROS = "microseconds";  // untranslated
Blockly.Msg.ARD_TIME_DELAY_MICRO_TIP = "Wait specific time in microseconds";  // untranslated
Blockly.Msg.ARD_TIME_DELAY_TIP = "Wait specific time in milliseconds";  // untranslated
Blockly.Msg.ARD_TIME_INF = "wait forever (end program)";  // untranslated
Blockly.Msg.ARD_TIME_INF_TIP = "Wait indefinitely, stopping the program.";  // untranslated
Blockly.Msg.ARD_TIME_MICROS = "current elapsed Time (microseconds)";  // untranslated
Blockly.Msg.ARD_TIME_MICROS_TIP = "Returns the number of microseconds since the Arduino board began running the current program. Has to be stored in a positive long integer";  // untranslated
Blockly.Msg.ARD_TIME_MILLIS = "current elapsed Time (milliseconds)";  // untranslated
Blockly.Msg.ARD_TIME_MILLIS_TIP = "Returns the number of milliseconds since the Arduino board began running the current program. Has to be stored in a positive long integer";  // untranslated
Blockly.Msg.ARD_TIME_MS = "milliseconds";  // untranslated
Blockly.Msg.ARD_TONEFREQ = "at frequency";  // untranslated
Blockly.Msg.ARD_TONE_FREQ = "frequency";  // untranslated
Blockly.Msg.ARD_TONE_PIN = "Tone PIN#";  // untranslated
Blockly.Msg.ARD_TONE_PIN_TIP = "Generate audio tones on a pin";  // untranslated
Blockly.Msg.ARD_TONE_TIP = "Sets tone on pin to specified frequency within range 31 - 65535";  // untranslated
Blockly.Msg.ARD_TONE_WARNING = "Frequency must be in range 31 - 65535";  // untranslated
Blockly.Msg.ARD_TYPE_ARRAY = "Array";  // untranslated
Blockly.Msg.ARD_TYPE_BOOL = "Boolean";  // untranslated
Blockly.Msg.ARD_TYPE_CHAR = "Character";  // untranslated
Blockly.Msg.ARD_TYPE_CHILDBLOCKMISSING = "ChildBlockMissing";  // untranslated
Blockly.Msg.ARD_TYPE_DECIMAL = "Decimal";  // untranslated
Blockly.Msg.ARD_TYPE_LONG = "Large Number";  // untranslated
Blockly.Msg.ARD_TYPE_NULL = "Null";  // untranslated
Blockly.Msg.ARD_TYPE_NUMBER = "Number";  // untranslated
Blockly.Msg.ARD_TYPE_SHORT = "Short Number";  // untranslated
Blockly.Msg.ARD_TYPE_TEXT = "Text";  // untranslated
Blockly.Msg.ARD_TYPE_UNDEF = "Undefined";  // untranslated
Blockly.Msg.ARD_VAR_AS = "as";  // untranslated
Blockly.Msg.ARD_VAR_AS_TIP = "Sets a value to a specific type";  // untranslated
Blockly.Msg.ARD_WRITE_TO = "to";  // untranslated
Blockly.Msg.NEW_INSTANCE = "New instance...";  // untranslated
Blockly.Msg.NEW_INSTANCE_TITLE = "New instance name:";  // untranslated
Blockly.Msg.RENAME_INSTANCE = "Rename instance...";  // untranslated
Blockly.Msg.RENAME_INSTANCE_TITLE = "Rename all '%1' instances to:";  // untranslated
Blockly.Msg.cases_add = "Case";  // untranslated
Blockly.Msg.cases_condition = "Case (Variable) = ";  // untranslated
Blockly.Msg.cases_do = "Do";  // untranslated
Blockly.Msg.cases_switch = "Variable";  // untranslated
Blockly.Msg.senseBox_LoRa_app_id = "Application EUI (lsb)";  // untranslated
Blockly.Msg.senseBox_LoRa_app_key = "App Key (msb)";  // untranslated
Blockly.Msg.senseBox_LoRa_appskey_id = "App Session Key (msb)";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_alt = "Altitude";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_analog = "Analog Value";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_analog_tip = "Send a value with one decimal";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_channel = "Channel";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_gps_tip = "Send GPS Data";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_gyros_tip = "Send a value from the Gyroscope";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_humidity = "Humidity";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_humidity_tip = "Send temperature with one decimal";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_lat = "Latitude";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_lng = "Longitude";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_luminosity = "Luminosity";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_luminosity_tip = "Send luminosity";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_pressure = "Pressure";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_pressure_tip = "Send pressure with one decimal";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_temperature = "Temperature";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_temperature_tip = "Send temperature with one decimal";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_tip = "Send Data as Cayenne Payload Format";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_x = "X Value";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_y = "Y Value";  // untranslated
Blockly.Msg.senseBox_LoRa_cayenne_z = "Z Value";  // untranslated
Blockly.Msg.senseBox_LoRa_connect = "Send to TTN";  // untranslated
Blockly.Msg.senseBox_LoRa_devaddr_id = "Device Adress";  // untranslated
Blockly.Msg.senseBox_LoRa_device_id = "Device EUI (lsb)";  // untranslated
Blockly.Msg.senseBox_LoRa_init_abp_tip = "Initialise the LoRa tranismission. Copy ID's as lsb";  // untranslated
Blockly.Msg.senseBox_LoRa_init_otaa_tip = "Initialise the LoRa tranismission. Copy ID's as lsb";  // untranslated
Blockly.Msg.senseBox_LoRa_interval = "Transmission interval in minutes";  // untranslated
Blockly.Msg.senseBox_LoRa_message_tip = "Send a message with LoRa";  // untranslated
Blockly.Msg.senseBox_LoRa_nwskey_id = "Network Session Key (msb)";  // untranslated
Blockly.Msg.senseBox_LoRa_send_cayenne = "Send as Cayenne Payload";  // untranslated
Blockly.Msg.senseBox_LoRa_send_message = "Send as Lora Message";  // untranslated
Blockly.Msg.senseBox_LoRa_sensor_tip = "Send a value with a specific number of bytes";  // untranslated
Blockly.Msg.senseBox_SD_COMPONENT = "SD-Block";  // untranslated
Blockly.Msg.senseBox_basic_blue  = "Blue";  // untranslated
Blockly.Msg.senseBox_basic_green  = "Gree";  // untranslated
Blockly.Msg.senseBox_basic_red  = "Red";  // untranslated
Blockly.Msg.senseBox_basic_state  = "Status";  // untranslated
Blockly.Msg.senseBox_bme680 = "Environmental sensor (BME680)";  // untranslated
Blockly.Msg.senseBox_bme680_tip = "Returns values from the BME680";  // untranslated
Blockly.Msg.senseBox_bme680_warning = "Warning. Gas (VOC) cannot be measured simultaneously with other parameters.";  // untranslated
Blockly.Msg.senseBox_bme_breatheVocEquivalent = "Breathe VOC Equivalent";  // untranslated
Blockly.Msg.senseBox_bme_co2 = "CO2 Equivalent";  // untranslated
Blockly.Msg.senseBox_bme_iaq = "Indoor Air Quality (IAQ)";  // untranslated
Blockly.Msg.senseBox_bme_iaq_accuracy = "Calibration Value";  // untranslated
Blockly.Msg.senseBox_bme_tip = "Returns values from the BME680";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer  = "Accelerometer";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_direction = "Direction";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_direction_total = "Total";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_direction_x = "X-Axis";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_direction_y = "Y-Axis";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_direction_z = "Z-Axis";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_range = "Range";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_range_16g = "16g";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_range_2g = "2g";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_range_4g = "4g";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_range_8g = "8g";  // untranslated
Blockly.Msg.senseBox_bmx055_accelerometer_tip  = "Measuring the acceleration";  // untranslated
Blockly.Msg.senseBox_bmx055_compass = "Compass";  // untranslated
Blockly.Msg.senseBox_bmx055_compass_tip  = "Gives the ";  // untranslated
Blockly.Msg.senseBox_bmx055_gyroscope  = "Gyroscope";  // untranslated
Blockly.Msg.senseBox_bmx055_gyroscope_tip  = "Lage Sensor";  // untranslated
Blockly.Msg.senseBox_bmx055_x  = "X-Direction";  // untranslated
Blockly.Msg.senseBox_bmx055_y  = "Y-Direction";  // untranslated
Blockly.Msg.senseBox_button  = "Button";  // untranslated
Blockly.Msg.senseBox_button_isPressed = "is Pressed";  // untranslated
Blockly.Msg.senseBox_button_switch = "as Switch";  // untranslated
Blockly.Msg.senseBox_button_tip  = "Button";  // untranslated
Blockly.Msg.senseBox_button_wasPressed = "was Pressed";  // untranslated
Blockly.Msg.senseBox_display_beginDisplay  = "Initialize Display";  // untranslated
Blockly.Msg.senseBox_display_beginDisplay_tip  = "Starts the display";  // untranslated
Blockly.Msg.senseBox_display_black  = "Black";  // untranslated
Blockly.Msg.senseBox_display_clearDisplay  = "Clear Display";  // untranslated
Blockly.Msg.senseBox_display_clearDisplay_tip  = "Clear the display content";  // untranslated
Blockly.Msg.senseBox_display_color  = "Font color";  // untranslated
Blockly.Msg.senseBox_display_fastPrint_dimension = "Unit";  // untranslated
Blockly.Msg.senseBox_display_fastPrint_show = "Show Measurements";  // untranslated
Blockly.Msg.senseBox_display_fastPrint_tip = "Show two measurements with title and dimension on the display";  // untranslated
Blockly.Msg.senseBox_display_fastPrint_title = "Title";  // untranslated
Blockly.Msg.senseBox_display_fastPrint_value = "Measurement";  // untranslated
Blockly.Msg.senseBox_display_filled = "filled";  // untranslated
Blockly.Msg.senseBox_display_plotDisplay  = "Plot Diagram";  // untranslated
Blockly.Msg.senseBox_display_plotTimeFrame = "TimeFrame";  // untranslated
Blockly.Msg.senseBox_display_plotTitle = "Title";  // untranslated
Blockly.Msg.senseBox_display_plotXLabel  = "X-Axis Label";  // untranslated
Blockly.Msg.senseBox_display_plotXRange1  = "X-Range Begin";  // untranslated
Blockly.Msg.senseBox_display_plotXRange2  = "X-Range End";  // untranslated
Blockly.Msg.senseBox_display_plotXTick  = "X-Tick";  // untranslated
Blockly.Msg.senseBox_display_plotYLabel  = "Y-Axis Label";  // untranslated
Blockly.Msg.senseBox_display_plotYRange1 = "Y-Range Begin";  // untranslated
Blockly.Msg.senseBox_display_plotYRange2 = "Y-Range End";  // untranslated
Blockly.Msg.senseBox_display_plotYTick  = "Y-Tick";  // untranslated
Blockly.Msg.senseBox_display_printDisplay  = "Write Text/Number";  // untranslated
Blockly.Msg.senseBox_display_printDisplay_tip  = "Prints Values to the Display, set X and Y Location";  // untranslated
Blockly.Msg.senseBox_display_printDisplay_value  = "value";  // untranslated
Blockly.Msg.senseBox_display_printDisplay_x  = "x-coordinates";  // untranslated
Blockly.Msg.senseBox_display_printDisplay_y  = "y-coordinates";  // untranslated
Blockly.Msg.senseBox_display_setSize  = "set font size to";  // untranslated
Blockly.Msg.senseBox_display_setSize_tip  = "Change the font size. Set a Value between 1-10.";  // untranslated
Blockly.Msg.senseBox_display_white  = "White";  // untranslated
Blockly.Msg.senseBox_foto  = "Light Dependent Resistor";  // untranslated
Blockly.Msg.senseBox_foto_tip  = "simple light depending resistor, gives values between 0 and 1023";  // untranslated
Blockly.Msg.senseBox_gas = "Gas (VOC)";  // untranslated
Blockly.Msg.senseBox_gps_alt = "altitude";  // untranslated
Blockly.Msg.senseBox_gps_begin = "initialize GPS";  // untranslated
Blockly.Msg.senseBox_gps_begin_tip = "initialize GPS Sensor";  // untranslated
Blockly.Msg.senseBox_gps_date = "date";  // untranslated
Blockly.Msg.senseBox_gps_getValues = "GPS-Module";  // untranslated
Blockly.Msg.senseBox_gps_getValues_tip = "gets the specific Value from the GPS Sensor";  // untranslated
Blockly.Msg.senseBox_gps_lat = "latitude";  // untranslated
Blockly.Msg.senseBox_gps_lng = "longitude";  // untranslated
Blockly.Msg.senseBox_gps_speed = "speed";  // untranslated
Blockly.Msg.senseBox_gps_time = "time";  // untranslated
Blockly.Msg.senseBox_gps_timeStamp = "timestamp (RFC 3339)";  // untranslated
Blockly.Msg.senseBox_html_body = "<body>";  // untranslated
Blockly.Msg.senseBox_html_body_end = "</body>";  // untranslated
Blockly.Msg.senseBox_html_document = "HTML";  // untranslated
Blockly.Msg.senseBox_html_document_tip = "A block for generating a HTML document.";  // untranslated
Blockly.Msg.senseBox_html_general_tag_tip = "A general HTML tag building block.";  // untranslated
Blockly.Msg.senseBox_html_header = "<head>";  // untranslated
Blockly.Msg.senseBox_html_header_end = "</head>";  // untranslated
Blockly.Msg.senseBox_http_method = "Method";  // untranslated
Blockly.Msg.senseBox_http_method_tip = "Method of the current HTTP request";  // untranslated
Blockly.Msg.senseBox_http_not_found = "404 Not found";  // untranslated
Blockly.Msg.senseBox_http_not_found_tip = "Send a predefined 404 HTTP response.";  // untranslated
Blockly.Msg.senseBox_http_on_client_connect = "If client is connected:";  // untranslated
Blockly.Msg.senseBox_http_on_client_connect_tip = "Checks if a client is connected and executes given statement in that case.";  // untranslated
Blockly.Msg.senseBox_http_protocol_version = "HTTP Version";  // untranslated
Blockly.Msg.senseBox_http_protocol_version_tip = "The HTTP Version of the current HTTP request";  // untranslated
Blockly.Msg.senseBox_http_success = "Succesful";  // untranslated
Blockly.Msg.senseBox_http_success_l2 = "HTTP reponse";  // untranslated
Blockly.Msg.senseBox_http_success_tip = "Send a successful HTTP response with content.";  // untranslated
Blockly.Msg.senseBox_http_uri = "URI";  // untranslated
Blockly.Msg.senseBox_http_uri_tip = "URI of requested resource of the current HTTP request";  // untranslated
Blockly.Msg.senseBox_http_user_agent = "User-Agent";  // untranslated
Blockly.Msg.senseBox_http_user_agent_tip = "The User-Agent send along with the current HTTP request";  // untranslated
Blockly.Msg.senseBox_hum  = "humidity in %";  // untranslated
Blockly.Msg.senseBox_hum_tip  = "Measures humidity in %";  // untranslated
Blockly.Msg.senseBox_init_http_server = "Initialize HTTP-Server";  // untranslated
Blockly.Msg.senseBox_init_http_server_tip = "Initializes a http server on the specified port.";  // untranslated
Blockly.Msg.senseBox_interval = "ms";  // untranslated
Blockly.Msg.senseBox_interval_timer = "Measuring interval";  // untranslated
Blockly.Msg.senseBox_interval_timer_tip = "Setup an Intervall";  // untranslated
Blockly.Msg.senseBox_ip_address = "IP-Address";  // untranslated
Blockly.Msg.senseBox_ip_address_tip = "Returns the IP address as a string.";  // untranslated
Blockly.Msg.senseBox_ir  = "infrared distance sensor";  // untranslated
Blockly.Msg.senseBox_ir_tip  = "infrared distance sensor can measure the distance between 10 and 80 cm";  // untranslated
Blockly.Msg.senseBox_led  = "LED connected to digital";  // untranslated
Blockly.Msg.senseBox_led_tip  = "simple LED. Don't forget the resistor";  // untranslated
Blockly.Msg.senseBox_light  = "Illuminance in Lux";  // untranslated
Blockly.Msg.senseBox_lux  = "lightsensor";  // untranslated
Blockly.Msg.senseBox_lux_tip  = "Light Sensor can measure the illuminance in lux";  // untranslated
Blockly.Msg.senseBox_measurement = "Measurement";  // untranslated
Blockly.Msg.senseBox_measurements = "Measurements";  // untranslated
Blockly.Msg.senseBox_off  = "off";  // untranslated
Blockly.Msg.senseBox_on  = "on";  // untranslated
Blockly.Msg.senseBox_osem_access_token = "API Key";  // untranslated
Blockly.Msg.senseBox_osem_connection  = "Connect to openSenseMap";  // untranslated
Blockly.Msg.senseBox_osem_connection_tip  = "";  // untranslated
Blockly.Msg.senseBox_osem_exposure = "Type";  // untranslated
Blockly.Msg.senseBox_osem_host = "opensensemap.org";  // untranslated
Blockly.Msg.senseBox_osem_host_workshop = "workshop.opensensemap.org";  // untranslated
Blockly.Msg.senseBox_osem_mobile = "Mobile";  // untranslated
Blockly.Msg.senseBox_osem_restart = "Restart if device was disconnected?";  // untranslated
Blockly.Msg.senseBox_osem_stationary = "Stationary";  // untranslated
Blockly.Msg.senseBox_output_filename  = "filename";  // untranslated
Blockly.Msg.senseBox_output_format  = "format:";  // untranslated
Blockly.Msg.senseBox_output_linebreak  = "linebreak";  // untranslated
Blockly.Msg.senseBox_output_networkid  = "networkID";  // untranslated
Blockly.Msg.senseBox_output_password  = "Password";  // untranslated
Blockly.Msg.senseBox_output_safetosd  = "safe to sd";  // untranslated
Blockly.Msg.senseBox_output_safetosd_tip  = "Save Measurment to SD-Card";  // untranslated
Blockly.Msg.senseBox_output_serialprint  = "Print on Serial Monitor";  // untranslated
Blockly.Msg.senseBox_output_timestamp  = "timestamp";  // untranslated
Blockly.Msg.senseBox_piezo_tip  = "simple piezo to make sound";  // untranslated
Blockly.Msg.senseBox_poti  = "Potentiometer";  // untranslated
Blockly.Msg.senseBox_poti_tip  = "Potentiometer";  // untranslated
Blockly.Msg.senseBox_pressure  = "Airpressure in Pa";  // untranslated
Blockly.Msg.senseBox_pressure_referencePressure = "Pressure at Sea Level";  // untranslated
Blockly.Msg.senseBox_pressure_referencePressure_dim = "hPa";  // untranslated
Blockly.Msg.senseBox_pressure_sensor  = "Airpressure/Temperature Sensor (BMP280)";  // untranslated
Blockly.Msg.senseBox_pressure_tip  = "airpressure sensor can measure the airpressure in Pa";  // untranslated
Blockly.Msg.senseBox_rgb_led  = "RGB-LED";  // untranslated
Blockly.Msg.senseBox_rgb_led_tip  = "RGB-LED";  // untranslated
Blockly.Msg.senseBox_scd30 = "CO2 Sensor (Sensirion SCD30)";  // untranslated
Blockly.Msg.senseBox_scd_co2 = "CO2 in ppm";  // untranslated
Blockly.Msg.senseBox_scd_tip = "Returns value of the CO2 Sensor";  // untranslated
Blockly.Msg.senseBox_sd_create_file  = "Create file on SD-Card";  // untranslated
Blockly.Msg.senseBox_sd_decimals = "decimals";  // untranslated
Blockly.Msg.senseBox_sd_open_file  = "Open a file from SD-Card";  // untranslated
Blockly.Msg.senseBox_sd_web_readHTML = "Read HTML from SD Card";  // untranslated
Blockly.Msg.senseBox_sd_write_file  = " Write Data to SD-Card";  // untranslated
Blockly.Msg.senseBox_sds011  = "Fine Particular Sensor";  // untranslated
Blockly.Msg.senseBox_sds011_dimension  = "in µg/m³ at";  // untranslated
Blockly.Msg.senseBox_sds011_pm10  = "PM10";  // untranslated
Blockly.Msg.senseBox_sds011_pm25  = "PM2.5";  // untranslated
Blockly.Msg.senseBox_sds011_serial1  = "Serial1";  // untranslated
Blockly.Msg.senseBox_sds011_serial2  = "Serial2";  // untranslated
Blockly.Msg.senseBox_sds011_tip  = "Measuring the fine particular concentration";  // untranslated
Blockly.Msg.senseBox_send_mobile_to_osem = "Send measurement and location to openSenseMap";  // untranslated
Blockly.Msg.senseBox_send_mobile_to_osem_tip = "Send Value and Location to openSenseMap";  // untranslated
Blockly.Msg.senseBox_send_to_osem  = "Send measurement to openSenseMap";  // untranslated
Blockly.Msg.senseBox_send_to_osem_tip  = "sends the measurement to openSenseMap. Make shure to enter the correct BoxID and SensorID";  // untranslated
Blockly.Msg.senseBox_sensor  = "Sensors";  // untranslated
Blockly.Msg.senseBox_serial_tip  = "prints the values to the serial monitor in the arduino IDE. Good way to have a fast and easy feedback for your programm";  // untranslated
Blockly.Msg.senseBox_soil = "Soil Moisture";  // untranslated
Blockly.Msg.senseBox_sound  = "Microphone";  // untranslated
Blockly.Msg.senseBox_sound_tip  = "This block returns the measured value of the microphone in volts.";  // untranslated
Blockly.Msg.senseBox_soundsensor_dfrobot = "Soundsensor";  // untranslated
Blockly.Msg.senseBox_tag_first_mutator_tip = "Mandatory children to this block.";  // untranslated
Blockly.Msg.senseBox_tag_optional_mutator_tip = "Add more children to the block.";  // untranslated
Blockly.Msg.senseBox_telegram_do = "Telegram do";  // untranslated
Blockly.Msg.senseBox_telegram_do_on_message = "on message";  // untranslated
Blockly.Msg.senseBox_telegram_init = "Initialize Telegram Bot";  // untranslated
Blockly.Msg.senseBox_telegram_message = "Message";  // untranslated
Blockly.Msg.senseBox_telegram_send = "Send Message";  // untranslated
Blockly.Msg.senseBox_telegram_token = "Token";  // untranslated
Blockly.Msg.senseBox_temp  = "Temperature in °C";  // untranslated
Blockly.Msg.senseBox_temp_hum  = "Temperature/Humidity Sensor (HDC1080)";  // untranslated
Blockly.Msg.senseBox_temp_hum_tip  = "Sensor measuring temperature and humidity";  // untranslated
Blockly.Msg.senseBox_ultrasonic  = "Ultrasonic distance sensor at Port";  // untranslated
Blockly.Msg.senseBox_ultrasonic_echo = "Echo";  // untranslated
Blockly.Msg.senseBox_ultrasonic_port_A = "A";  // untranslated
Blockly.Msg.senseBox_ultrasonic_port_B = "B";  // untranslated
Blockly.Msg.senseBox_ultrasonic_port_C = "C";  // untranslated
Blockly.Msg.senseBox_ultrasonic_tip  = "ultrasonic distance sensor";  // untranslated
Blockly.Msg.senseBox_ultrasonic_trigger = "Trigger";  // untranslated
Blockly.Msg.senseBox_uv  = "UV-Light in µW/cm²";  // untranslated
Blockly.Msg.senseBox_uv_light  = "Light Visible + UV";  // untranslated
Blockly.Msg.senseBox_uv_light_tip  = "Sensor measuring the UV-light and the illuminance";  // untranslated
Blockly.Msg.senseBox_value  = "value:";  // untranslated
Blockly.Msg.senseBox_watertemperature = "Water Temperature";  // untranslated
Blockly.Msg.senseBox_wifi_connect = "Connect to Wifi";  // untranslated
Blockly.Msg.senseBox_wifi_ssid = "Networkname";  // untranslated
Blockly.Msg.senseBox_wifi_startap = "Initialize Wifi Access Point";  // untranslated
Blockly.Msg.senseBox_wifi_tip  = "Establishes a wifi connection";  // untranslated
Blockly.Msg.senseBox_windspeed = "Windspeed";  // untranslated
Blockly.Msg.senseBox_ws2818_rgb_led = "Set ";  // untranslated
Blockly.Msg.senseBox_ws2818_rgb_led_brightness = "Brightness";  // untranslated
Blockly.Msg.senseBox_ws2818_rgb_led_color = "Color";  // untranslated
Blockly.Msg.senseBox_ws2818_rgb_led_init = "Initialise RGB-LED (WS2818)";  // untranslated
Blockly.Msg.senseBox_ws2818_rgb_led_number = "Number of RGB-LEDs";  // untranslated
Blockly.Msg.senseBox_ws2818_rgb_led_pin = "at Pin:";  // untranslated
Blockly.Msg.senseBox_ws2818_rgb_led_position = "Position";  // untranslated
Blockly.Msg.sensebox_display_drawRectangle = "Draw Rectangle";  // untranslated
Blockly.Msg.sensebox_display_drawRectangle_height = "height";  // untranslated
Blockly.Msg.sensebox_display_drawRectangle_width = "width";  // untranslated
Blockly.Msg.sensebox_display_fillCircle = "Draw Point";  // untranslated
Blockly.Msg.sensebox_display_fillCircle_radius = "Radius";  // untranslated
Blockly.Msg.sensebox_display_show  = "Print on Display";  // untranslated
Blockly.Msg.sensebox_display_show_tip  = "Print on Display";  // untranslated
Blockly.Msg.sensebox_sd_filename = "data";  // untranslated
Blockly.Msg.sensebox_soil_smt50 = "Soil Moisture and Temperature (SMT50)";  // untranslated
Blockly.Msg.sensebox_web_readHTML_filename = "File:";  // untranslated
