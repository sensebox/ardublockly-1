{
	"@metadata": {
		"author": "carlosperate",
		"lastupdated": "2019-01-24 09:19:32.824295",
		"locale": "en",
		"messagedocumentation": "qqq_ardublockly"
	},
	"ARD_TYPE_CHAR": "Character",
	"ARD_TYPE_TEXT": "Text",
	"ARD_TYPE_BOOL": "Boolean",
	"ARD_TYPE_SHORT": "Short Number",
	"ARD_TYPE_NUMBER": "Number",
	"ARD_TYPE_LONG": "Large Number",
	"ARD_TYPE_DECIMAL": "Decimal",
	"ARD_TYPE_ARRAY": "Array",
	"ARD_TYPE_NULL": "Null",
	"ARD_TYPE_UNDEF": "Undefined",
	"ARD_TYPE_CHILDBLOCKMISSING": "ChildBlockMissing",
	"ARD_HIGH": "HIGH",
	"ARD_LOW": "LOW",
	"ARD_ANALOGREAD": "read analog pin#",
	"ARD_ANALOGREAD_TIP": "Return value between 0 and 1024",
	"ARD_ANALOGWRITE": "set analog pin#",
	"ARD_ANALOGWRITE_TIP": "Write analog value between 0 and 255 to a specific PWM Port",
	"ARD_HIGHLOW_TIP": "Set a pin state logic High or Low.",
	"ARD_DIGITALREAD": "read digital pin#",
	"ARD_DIGITALREAD_TIP": "Read digital value on a pin: HIGH or LOW",
	"ARD_DIGITALWRITE": "set digitial pin#",
	"ARD_WRITE_TO": "to",
	"ARD_DIGITALWRITE_TIP": "Write digital value HIGH or LOW to a specific Port",
	"ARD_BUILTIN_LED": "set built-in LED",
	"ARD_BUILTIN_LED_TIP": "Light on or off for the built-in LED of the Arduino",
	"ARD_DEFINE": "Define",
	"ARD_TONE_PIN": "Tone PIN#",
	"ARD_TONE_FREQ": "frequency",
	"ARD_TONE_PIN_TIP": "Generate audio tones on a pin",
	"ARD_NOTONE_PIN": "No tone PIN#",
	"ARD_NOTONE_PIN_TIP": "Stop generating a tone on a pin",
	"ARD_MAP": "Map Value",
	"ARD_MAP_VAL": "value to [0-",
	"ARD_MAP_FROMMIN": "from Min",
	"ARD_MAP_FROMMAX": "from Max",
	"ARD_MAP_TOMIN": "to Min",
	"ARD_MAP_TOMAX": "to Max",
	"ARD_MAP_TIP": "Re-maps a number from [0-1024] to another.",
	"ARD_FUN_RUN_SETUP": "Arduino run first:",
	"ARD_FUN_RUN_LOOP": "Arduino loop forever:",
	"ARD_FUN_RUN_TIP": "Defines the Arduino setup() and loop() functions.",
	"ARD_PIN_WARN1": "Pin %1 is needed for %2 as pin %3. Already used as %4.",
	"ARD_SERIAL_SETUP": "Setup",
	"ARD_SERIAL_SPEED": ":  speed to",
	"ARD_SERIAL_BPS": "bps",
	"ARD_SERIAL_SETUP_TIP": "Selects the speed for a specific Serial peripheral",
	"ARD_SERIAL_PRINT": "print",
	"ARD_SERIAL_PRINT_NEWLINE": "add new line",
	"ARD_SERIAL_PRINT_TIP": "Prints data to the console/serial port as human-readable ASCII text.",
	"ARD_SERIAL_PRINT_WARN": "A setup block for %1 must be added to the workspace to use this block!",
	"ARD_SERVO_WRITE": "set SERVO from Pin",
	"ARD_SERVO_WRITE_TO": "to",
	"ARD_SERVO_WRITE_DEG_180": "Degrees (0~180)",
	"ARD_SERVO_WRITE_TIP": "Set a Servo to an specified angle",
	"ARD_SERVO_READ": "read SERVO from PIN#",
	"ARD_SERVO_READ_TIP": "Read a Servo angle",
	"ARD_SPI_SETUP": "Setup",
	"ARD_SPI_SETUP_CONF": "configuration:",
	"ARD_SPI_SETUP_SHIFT": "data shift",
	"ARD_SPI_SETUP_MSBFIRST": "MSBFIRST",
	"ARD_SPI_SETUP_LSBFIRST": "LSBFIRST",
	"ARD_SPI_SETUP_DIVIDE": "clock divide",
	"ARD_SPI_SETUP_MODE": "SPI mode (idle - edge)",
	"ARD_SPI_SETUP_MODE0": "0 (Low - Falling)",
	"ARD_SPI_SETUP_MODE1": "1 (Low - Rising)",
	"ARD_SPI_SETUP_MODE2": "2 (High - Falling)",
	"ARD_SPI_SETUP_MODE3": "3 (High - Rising)",
	"ARD_SPI_SETUP_TIP": "Configures the SPI peripheral.",
	"ARD_SPI_TRANS_NONE": "none",
	"ARD_SPI_TRANS_VAL": "transfer",
	"ARD_SPI_TRANS_SLAVE": "to slave pin",
	"ARD_SPI_TRANS_TIP": "Send a SPI message to an specified slave device.",
	"ARD_SPI_TRANS_WARN1": "A setup block for %1 must be added to the workspace to use this block!",
	"ARD_SPI_TRANS_WARN2": "Old pin value %1 is no longer available.",
	"ARD_SPI_TRANSRETURN_TIP": "Send a SPI message to an specified slave device and get data back.",
	"ARD_STEPPER_SETUP": "Setup stepper motor",
	"ARD_STEPPER_MOTOR": "stepper motor:",
	"ARD_STEPPER_DEFAULT_NAME": "MyStepper",
	"ARD_STEPPER_NUMBER_OF_PINS": "Number of pins",
	"ARD_STEPPER_TWO_PINS": "2",
	"ARD_STEPPER_FOUR_PINS": "4",
	"ARD_STEPPER_PIN1": "pin1#",
	"ARD_STEPPER_PIN2": "pin2#",
	"ARD_STEPPER_PIN3": "pin3#",
	"ARD_STEPPER_PIN4": "pin4#",
	"ARD_STEPPER_REVOLVS": "how many steps per revolution",
	"ARD_STEPPER_SPEED": "set speed (rpm) to",
	"ARD_STEPPER_SETUP_TIP": "Configures a stepper motor pinout and other settings.",
	"ARD_STEPPER_STEP": "move stepper",
	"ARD_STEPPER_STEPS": "steps",
	"ARD_STEPPER_STEP_TIP": "Turns the stepper motor a specific number of steps.",
	"ARD_STEPPER_COMPONENT": "stepper",
	"ARD_COMPONENT_WARN1": "A %1 configuration block with the same %2 name must be added to use this block!",
	"ARD_TIME_DELAY": "wait",
	"ARD_TIME_MS": "milliseconds",
	"ARD_TIME_DELAY_TIP": "Wait specific time in milliseconds",
	"ARD_TIME_DELAY_MICROS": "microseconds",
	"ARD_TIME_DELAY_MICRO_TIP": "Wait specific time in microseconds",
	"ARD_TIME_MILLIS": "current elapsed Time (milliseconds)",
	"ARD_TIME_MILLIS_TIP": "Returns the number of milliseconds since the Arduino board began running the current program. Has to be stored in a positive long integer",
	"ARD_TIME_MICROS": "current elapsed Time (microseconds)",
	"ARD_TIME_MICROS_TIP": "Returns the number of microseconds since the Arduino board began running the current program. Has to be stored in a positive long integer",
	"ARD_TIME_INF": "wait forever (end program)",
	"ARD_TIME_INF_TIP": "Wait indefinitely, stopping the program.",
	"ARD_VAR_AS": "as",
	"ARD_VAR_AS_TIP": "Sets a value to a specific type",
	"ARD_PULSE_READ": "measure %1 pulse on pin #%2",
	"ARD_PULSE_READ_TIMEOUT": "measure %1 pulse on pin #%2 (timeout after %3 μs)",
	"ARD_PULSE_TIP": "Measures the duration of a pulse on the selected pin.",
	"ARD_PULSETIMEOUT_TIP": "Measures the duration of a pulse on the selected pin, if it is within the time-out in microseconds.",
	"ARD_SETTONE": "Set tone on pin #",
	"ARD_TONEFREQ": "at frequency",
	"ARD_TONE_TIP": "Sets tone on pin to specified frequency within range 31 - 65535",
	"ARD_TONE_WARNING": "Frequency must be in range 31 - 65535",
	"ARD_NOTONE": "Turn off tone on pin #",
	"ARD_NOTONE_TIP": "Turns the tone off on the selected pin",
	"NEW_INSTANCE": "New instance...",
	"RENAME_INSTANCE": "Rename instance...",
	"NEW_INSTANCE_TITLE": "New instance name:",
	"RENAME_INSTANCE_TITLE": "Rename all '%1' instances to:",
	"senseBox_basic_blue ": "Blue",
	"senseBox_basic_green ": "Gree",
	"senseBox_basic_red ": "Red",
	"senseBox_basic_state ": "Status",
	"senseBox_off ": "off",
	"senseBox_on ": "on",
	"senseBox_sensor ": "Sensors",
	"senseBox_output_filename ": "filename",
	"senseBox_output_format ": "format:",
	"senseBox_output_linebreak ": "linebreak",
	"senseBox_output_networkid ": "networkID",
	"senseBox_output_password ": "Password",
	"senseBox_output_safetosd ": "safe to sd",
	"senseBox_output_safetosd_tip ": "Save Measurment to SD-Card",
	"senseBox_sd_create_file ": "Create file on SD-Card",
	"senseBox_sd_write_file ": " Write Data to SD-Card",
	"senseBox_sd_open_file ": "Open a file from SD-Card",
	"sensebox_sd_filename": "data",
	"senseBox_SD_COMPONENT": "SD-Block",
	"senseBox_sd_decimals": "decimals",
	"senseBox_output_serialprint ": "Print on Serial Monitor",
	"senseBox_output_timestamp ": "timestamp",
	"senseBox_button ": "Button",
	"senseBox_foto ": "Light Dependent Resistor",
	"senseBox_hum ": "humidity in %",
	"senseBox_ir ": "infrared distance sensor",
	"senseBox_lux ": "lightsensor",
	"senseBox_poti ": "Potentiometer",
	"senseBox_pressure_sensor ": "Airpressure/Temperature Sensor (BMP280)",
	"senseBox_pressure ": "Airpressure in Pa",
	"senseBox_pressure_referencePressure": "Pressure at Sea Level",
	"senseBox_pressure_referencePressure_dim": "hPa",
	"senseBox_sound ": "Microphone",
	"senseBox_button_tip ": "Button",
	"senseBox_foto_tip ": "simple light depending resistor, gives values between 0 and 1023",
	"senseBox_hum_tip ": "Measures humidity in %",
	"senseBox_ir_tip ": "infrared distance sensor can measure the distance between 10 and 80 cm",
	"senseBox_lux_tip ": "Light Sensor can measure the illuminance in lux",
	"senseBox_poti_tip ": "Potentiometer",
	"senseBox_pressure_tip ": "airpressure sensor can measure the airpressure in Pa",
	"senseBox_sound_tip ": "This block returns the measured value of the microphone in volts.",
	"senseBox_piezo_tip ": "simple piezo to make sound",
	"senseBox_serial_tip ": "prints the values to the serial monitor in the arduino IDE. Good way to have a fast and easy feedback for your programm",
	"senseBox_rgb_led ": "RGB-LED",
	"senseBox_rgb_led_tip ": "RGB-LED",
	"senseBox_ws2818_rgb_led": "Set ",
	"senseBox_ws2818_rgb_led_init": "Initialise RGB-LED (WS2818)",
	"senseBox_ws2818_rgb_led_number": "Number of RGB-LEDs",
	"senseBox_ws2818_rgb_led_position": "Position",
	"senseBox_ws2818_rgb_led_brightness": "Brightness",
	"senseBox_ws2818_rgb_led_pin": "at Pin:",
	"senseBox_ws2818_rgb_led_color": "Color",
	"senseBox_led_tip ": "simple LED. Don't forget the resistor",
	"senseBox_temp ": "Temperature in °C",
	"senseBox_temp_hum ": "Temperature/Humidity Sensor (HDC1080)",
	"senseBox_temp_hum_tip ": "Sensor measuring temperature and humidity",
	"senseBox_ultrasonic ": "Ultrasonic distance sensor at Port",
	"senseBox_ultrasonic_tip ": "ultrasonic distance sensor",
	"senseBox_ultrasonic_port_A": "A",
	"senseBox_ultrasonic_port_B": "B",
	"senseBox_ultrasonic_port_C": "C",
	"senseBox_ultrasonic_echo": "Echo",
	"senseBox_ultrasonic_trigger": "Trigger",
	"senseBox_value ": "value:",
	"senseBox_uv_light ": "Light Visible + UV",
	"senseBox_uv_light_tip ": "Sensor measuring the UV-light and the illuminance",
	"senseBox_uv ": "UV-Light in µW/cm²",
	"senseBox_light ": "Illuminance in Lux",
	"senseBox_bmx055_compass": "Compass",
	"senseBox_bmx055_accelerometer ": "Accelerometer",
	"senseBox_bmx055_accelerometer_range": "Range",
	"senseBox_bmx055_accelerometer_range_2g": "2g",
	"senseBox_bmx055_accelerometer_range_4g": "4g",
	"senseBox_bmx055_accelerometer_range_8g": "8g",
	"senseBox_bmx055_accelerometer_range_16g": "16g",
	"senseBox_bmx055_accelerometer_direction": "Direction",
	"senseBox_bmx055_accelerometer_direction_x": "X-Axis",
	"senseBox_bmx055_accelerometer_direction_y": "Y-Axis",
	"senseBox_bmx055_accelerometer_direction_z": "Z-Axis",
	"senseBox_bmx055_accelerometer_direction_total": "Total",
	"senseBox_bmx055_gyroscope ": "Gyroscope",
	"senseBox_bmx055_accelerometer_tip ": "Measuring the acceleration",
	"senseBox_bmx055_compass_tip ": "Gives the ",
	"senseBox_bmx055_gyroscope_tip ": "Lage Sensor",
	"senseBox_bmx055_x ": "X-Direction",
	"senseBox_bmx055_y ": "Y-Direction",
	"senseBox_led ": "LED connected to digital",
	"senseBox_wifi_tip ": "Establishes a wifi connection",
	"senseBox_wifi_connect": "Connect to Wifi",
	"senseBox_wifi_ssid": "Networkname",
	"senseBox_wifi_startap": "Initialize Wifi Access Point",
	"senseBox_osem_connection ": "Connect to openSenseMap",
	"senseBox_osem_connection_tip ": "",
	"senseBox_osem_access_token": "API Key",
	"senseBox_send_to_osem_tip ": "sends the measurement to openSenseMap. Make shure to enter the correct BoxID and SensorID",
	"senseBox_send_to_osem ": "Send measurement to openSenseMap",
	"senseBox_osem_host": "opensensemap.org",
	"senseBox_osem_host_workshop": "workshop.opensensemap.org",
	"senseBox_osem_stationary": "Stationary",
	"senseBox_osem_mobile": "Mobile",
	"senseBox_osem_exposure": "Type",
	"senseBox_osem_restart": "Restart if device was disconnected?",
	"senseBox_sds011 ": "Fine Particular Sensor",
	"senseBox_sds011_dimension ": "in µg/m³ at",
	"senseBox_sds011_pm25 ": "PM2.5",
	"senseBox_sds011_pm10 ": "PM10",
	"senseBox_sds011_tip ": "Measuring the fine particular concentration",
	"senseBox_sds011_serial1 ": "Serial1",
	"senseBox_sds011_serial2 ": "Serial2",
	"senseBox_display_beginDisplay ": "Initialize Display",
	"senseBox_display_beginDisplay_tip ": "Starts the display",
	"senseBox_display_clearDisplay ": "Clear Display",
	"senseBox_display_clearDisplay_tip ": "Clear the display content",
	"senseBox_display_printDisplay ": "Write Text/Number",
	"senseBox_display_printDisplay_tip ": "Prints Values to the Display, set X and Y Location",
	"senseBox_display_printDisplay_x ": "x-coordinates",
	"senseBox_display_printDisplay_y ": "y-coordinates",
	"senseBox_display_printDisplay_value ": "value",
	"senseBox_display_setSize ": "set font size to",
	"senseBox_display_setSize_tip ": "Change the font size. Set a Value between 1-10.",
	"senseBox_display_color ": "Font color",
	"senseBox_display_white ": "White",
	"senseBox_display_black ": "Black",
	"sensebox_display_show ": "Print on Display",
	"sensebox_display_show_tip ": "Print on Display",
	"senseBox_display_plotTitle": "Title",
	"senseBox_display_plotDisplay ": "Plot Diagram",
	"senseBox_display_plotXLabel ": "X-Axis Label",
	"senseBox_display_plotYLabel ": "Y-Axis Label",
	"senseBox_display_plotXRange1 ": "X-Range Begin",
	"senseBox_display_plotXRange2 ": "X-Range End",
	"senseBox_display_plotYRange1": "Y-Range Begin",
	"senseBox_display_plotYRange2": "Y-Range End",
	"senseBox_display_plotXTick ": "X-Tick",
	"senseBox_display_plotYTick ": "Y-Tick",
	"senseBox_display_plotTimeFrame": "TimeFrame",
	"sensebox_display_fillCircle": "Draw Point",
	"sensebox_display_fillCircle_radius": "Radius",
	"sensebox_display_drawRectangle": "Draw Rectangle",
	"sensebox_display_drawRectangle_width": "width",
	"sensebox_display_drawRectangle_height": "height",
	"senseBox_display_filled": "filled",
	"senseBox_display_fastPrint_show": "Show Measurements",
	"senseBox_display_fastPrint_title": "Title",
	"senseBox_display_fastPrint_value": "Measurement",
	"senseBox_display_fastPrint_dimension": "Unit",
	"senseBox_display_fastPrint_tip": "Show two measurements with title and dimension on the display",
	"senseBox_gps_begin": "initialize GPS",
	"senseBox_gps_begin_tip": "initialize GPS Sensor",
	"senseBox_gps_getValues": "GPS-Module",
	"senseBox_gps_getValues_tip": "gets the specific Value from the GPS Sensor",
	"senseBox_gps_lat": "latitude",
	"senseBox_gps_lng": "longitude",
	"senseBox_gps_alt": "altitude",
	"senseBox_gps_speed": "speed",
	"senseBox_gps_date": "date",
	"senseBox_gps_time": "time",
	"senseBox_gps_timeStamp": "timestamp (RFC 3339)",
	"senseBox_send_mobile_to_osem": "Send measurement and location to openSenseMap",
	"senseBox_send_mobile_to_osem_tip": "Send Value and Location to openSenseMap",
	"senseBox_interval_timer": "Measuring interval",
	"senseBox_interval": "ms",
	"senseBox_interval_timer_tip": "Setup an Intervall",
	"cases_do": "Do",
	"cases_condition": "Case (Variable) = ",
	"cases_switch": "Variable",
	"cases_add": "Case",
	"senseBox_button_isPressed": "is Pressed",
	"senseBox_button_switch": "as Switch",
	"senseBox_button_wasPressed": "was Pressed",
	"senseBox_soil": "Soil Moisture",
	"senseBox_watertemperature": "Water Temperature",
	"senseBox_ip_address": "IP-Address",
	"senseBox_ip_address_tip": "Returns the IP address as a string.",
	"senseBox_init_http_server_tip": "Initializes a http server on the specified port.",
	"senseBox_init_http_server": "Initialize HTTP-Server",
	"senseBox_http_on_client_connect": "If client is connected:",
	"senseBox_http_on_client_connect_tip": "Checks if a client is connected and executes given statement in that case.",
	"senseBox_http_method": "Method",
	"senseBox_http_method_tip": "Method of the current HTTP request",
	"senseBox_http_uri": "URI",
	"senseBox_http_uri_tip": "URI of requested resource of the current HTTP request",
	"senseBox_http_user_agent": "User-Agent",
	"senseBox_http_user_agent_tip": "The User-Agent send along with the current HTTP request",
	"senseBox_http_protocol_version": "HTTP Version",
	"senseBox_http_protocol_version_tip": "The HTTP Version of the current HTTP request",
	"senseBox_http_success_tip": "Send a successful HTTP response with content.",
	"senseBox_http_not_found_tip": "Send a predefined 404 HTTP response.",
	"senseBox_http_success": "Succesful",
	"senseBox_http_success_l2": "HTTP reponse",
	"senseBox_http_not_found": "404 Not found",
	"senseBox_html_document": "HTML",
	"senseBox_html_header": "<head>",
	"senseBox_html_header_end": "</head>",
	"senseBox_html_body": "<body>",
	"senseBox_html_body_end": "</body>",
	"senseBox_html_general_tag_tip": "A general HTML tag building block.",
	"senseBox_html_document_tip": "A block for generating a HTML document.",
	"senseBox_tag_first_mutator_tip": "Mandatory children to this block.",
	"senseBox_tag_optional_mutator_tip": "Add more children to the block.",
	"senseBox_sd_web_readHTML": "Read HTML from SD Card",
	"sensebox_web_readHTML_filename": "File:",
	"senseBox_bme680": "Environmental sensor (BME680)",
	"senseBox_bme680_tip": "Returns values from the BME680",
	"senseBox_bme680_warning": "Warning. Gas (VOC) cannot be measured simultaneously with other parameters.",
	"senseBox_bme_iaq": "Indoor Air Quality (IAQ)",
	"senseBox_bme_iaq_accuracy": "Calibration Value",
	"senseBox_bme_co2": "CO2 Equivalent",
	"senseBox_bme_breatheVocEquivalent": "Breathe VOC Equivalent",
	"senseBox_bme_tip": "Returns values from the BME680",
	"senseBox_gas": "Gas (VOC)",
	"sensebox_soil_smt50": "Soil Moisture and Temperature (SMT50)",
	"senseBox_telegram_init": "Initialize Telegram Bot",
	"senseBox_telegram_token": "Token",
	"senseBox_telegram_do": "Telegram do",
	"senseBox_telegram_do_on_message": "on message",
	"senseBox_telegram_message": "Message",
	"senseBox_telegram_send": "Send Message",
	"senseBox_LoRa_connect": "Send to TTN",
	"senseBox_LoRa_device_id": "Device EUI (lsb)",
	"senseBox_LoRa_app_id": "Application EUI (lsb)",
	"senseBox_LoRa_app_key": "App Key (msb)",
	"senseBox_LoRa_nwskey_id": "Network Session Key (msb)",
	"senseBox_LoRa_appskey_id": "App Session Key (msb)",
	"senseBox_LoRa_devaddr_id": "Device Adress",
	"senseBox_LoRa_interval": "Transmission interval in minutes",
	"senseBox_measurement": "Measurement",
	"senseBox_measurements": "Measurements",
	"senseBox_LoRa_send_message": "Send as Lora Message",
	"senseBox_LoRa_send_cayenne": "Send as Cayenne Payload",
	"senseBox_LoRa_cayenne_temperature": "Temperature",
	"senseBox_LoRa_cayenne_channel": "Channel",
	"senseBox_LoRa_cayenne_humidity": "Humidity",
	"senseBox_LoRa_cayenne_pressure": "Pressure",
	"senseBox_LoRa_cayenne_luminosity": "Luminosity",
	"senseBox_LoRa_cayenne_analog": "Analog Value",
	"senseBox_LoRa_cayenne_x": "X Value",
	"senseBox_LoRa_cayenne_y": "Y Value",
	"senseBox_LoRa_cayenne_z": "Z Value",
	"senseBox_LoRa_cayenne_lat": "Latitude",
	"senseBox_LoRa_cayenne_lng": "Longitude",
	"senseBox_LoRa_cayenne_alt": "Altitude",
	"senseBox_LoRa_cayenne_tip": "Send Data as Cayenne Payload Format",
	"senseBox_LoRa_cayenne_gps_tip": "Send GPS Data",
	"senseBox_LoRa_cayenne_humidity_tip": "Send temperature with one decimal",
	"senseBox_LoRa_cayenne_temperature_tip": "Send temperature with one decimal",
	"senseBox_LoRa_cayenne_pressure_tip": "Send pressure with one decimal",
	"senseBox_LoRa_cayenne_luminosity_tip": "Send luminosity",
	"senseBox_LoRa_cayenne_analog_tip": "Send a value with one decimal",
	"senseBox_LoRa_cayenne_gyros_tip": "Send a value from the Gyroscope",
	"senseBox_LoRa_message_tip": "Send a message with LoRa",
	"senseBox_LoRa_sensor_tip": "Send a value with a specific number of bytes",
	"senseBox_LoRa_init_abp_tip": "Initialise the LoRa tranismission. Copy ID's as lsb",
	"senseBox_LoRa_init_otaa_tip": "Initialise the LoRa tranismission. Copy ID's as lsb",
	"senseBox_windspeed": "Windspeed",
	"senseBox_soundsensor_dfrobot": "Soundsensor",
	"senseBox_scd30": "CO2 Sensor (Sensirion SCD30)",
	"senseBox_scd_tip": "Returns value of the CO2 Sensor",
	"senseBox_scd_co2": "CO2 in ppm"
}